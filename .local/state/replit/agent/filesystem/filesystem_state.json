{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# GrowthTracker Personal Development App\n\n## Overview\n\nGrowthTracker is a comprehensive personal development application that helps users track their journey through various life aspects including diary entries, stories, mistakes, achievements, study sessions, relationships, and AI-powered assessments. The app provides a unified dashboard for monitoring personal growth with features like calendar management, mood tracking, and intelligent recommendations through OpenRouter AI integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack React Query for server state management\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and dark theme support\n- **Authentication**: Context-based auth with JWT tokens stored in localStorage\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: JWT-based authentication with bcrypt password hashing\n- **API Design**: RESTful API with structured route organization\n- **Development**: Hot module replacement with Vite integration for seamless development experience\n\n### Database Design\n- **Primary Database**: PostgreSQL via Neon Database serverless connection\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Key Entities**: \n  - Users with profile information\n  - Diary entries with mood tracking\n  - Stories for creative writing\n  - Mistakes with lessons learned\n  - Achievements and milestones\n  - Study sessions with duration tracking\n  - People relationships with sentiment analysis\n  - Calendar events with categorization\n  - AI assessments with growth scoring\n\n### Authentication & Authorization\n- **Strategy**: JWT-based stateless authentication\n- **Password Security**: bcrypt hashing with salt rounds\n- **Token Management**: 24-hour expiration with authorization headers\n- **Protected Routes**: Middleware-based route protection on both client and server\n- **User Sessions**: Stateless design with token-based user identification\n\n### Data Flow Architecture\n- **Client-Server Communication**: Fetch API with centralized request handling\n- **Error Handling**: Structured error responses with toast notifications\n- **Data Validation**: Zod schemas for both client and server-side validation\n- **Real-time Updates**: Optimistic updates with React Query cache invalidation\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon Database (PostgreSQL serverless)\n- **AI Service**: OpenRouter API for personal growth assessments using Mistral-7B-Instruct model\n- **Development Platform**: Replit with custom Vite plugins for enhanced development experience\n\n### Frontend Libraries\n- **UI Framework**: React 18 with TypeScript\n- **Component Library**: Radix UI primitives with shadcn/ui customizations\n- **Form Management**: React Hook Form with Zod resolvers\n- **Date Handling**: date-fns for date manipulation and formatting\n- **Icons**: Lucide React for consistent iconography\n- **Styling**: Tailwind CSS with CSS variables for theming\n\n### Backend Libraries\n- **Runtime**: Node.js with ES modules\n- **Database**: Drizzle ORM with Neon serverless driver\n- **Security**: bcrypt for password hashing, jsonwebtoken for JWT handling\n- **Development**: tsx for TypeScript execution, esbuild for production builds\n\n### Development Tools\n- **Build System**: Vite with React plugin and custom Replit integrations\n- **Type Safety**: TypeScript with strict configuration\n- **Code Quality**: ESLint configuration for code standards\n- **Database Management**: Drizzle Kit for schema migrations and database operations","size_bytes":3906},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure Neon for serverless environment\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Create connection for Neon with proper SSL\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL\n});\nexport const db = drizzle({ client: pool, schema });","size_bytes":576},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, hashPassword, comparePassword, generateToken, AuthenticatedRequest } from \"./middleware/auth\";\nimport { generateAssessment } from \"./services/openrouter\";\nimport {\n  insertUserSchema,\n  insertDiaryEntrySchema,\n  insertStorySchema,\n  insertMistakeSchema,\n  insertAchievementSchema,\n  insertStudySessionSchema,\n  insertPersonSchema,\n  insertCalendarEventSchema,\n  insertAiAssessmentSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst signUpSchema = insertUserSchema.extend({\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst signInSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post('/api/auth/signup', async (req, res) => {\n    try {\n      const data = signUpSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(data.email);\n      if (existingUser) {\n        return res.status(400).json({ message: 'User already exists' });\n      }\n\n      const existingUsername = await storage.getUserByUsername(data.username);\n      if (existingUsername) {\n        return res.status(400).json({ message: 'Username already taken' });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(data.password);\n      const user = await storage.createUser({\n        ...data,\n        password: hashedPassword,\n      });\n\n      // Generate token\n      const token = generateToken({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n      });\n\n      res.status(201).json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        },\n        token,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/auth/signin', async (req, res) => {\n    try {\n      const data = signInSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(data.email);\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const validPassword = await comparePassword(data.password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n\n      const token = generateToken({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n      });\n\n      res.json({\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          firstName: user.firstName,\n          lastName: user.lastName,\n        },\n        token,\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/auth/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Diary routes\n  app.get('/api/diary', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const entries = await storage.getDiaryEntries(req.user!.id);\n      res.json(entries);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/diary', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertDiaryEntrySchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const entry = await storage.createDiaryEntry(data);\n      res.status(201).json(entry);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/diary/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertDiaryEntrySchema.partial().parse(req.body);\n      const entry = await storage.updateDiaryEntry(req.params.id, data);\n      res.json(entry);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/diary/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteDiaryEntry(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Story routes\n  app.get('/api/stories', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const stories = await storage.getStories(req.user!.id);\n      res.json(stories);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/stories', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertStorySchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const story = await storage.createStory(data);\n      res.status(201).json(story);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/stories/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertStorySchema.partial().parse(req.body);\n      const story = await storage.updateStory(req.params.id, data);\n      res.json(story);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/stories/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteStory(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Mistakes routes\n  app.get('/api/mistakes', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const mistakes = await storage.getMistakes(req.user!.id);\n      res.json(mistakes);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/mistakes', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertMistakeSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const mistake = await storage.createMistake(data);\n      res.status(201).json(mistake);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/mistakes/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertMistakeSchema.partial().parse(req.body);\n      const mistake = await storage.updateMistake(req.params.id, data);\n      res.json(mistake);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/mistakes/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteMistake(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Achievement routes\n  app.get('/api/achievements', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const achievements = await storage.getAchievements(req.user!.id);\n      res.json(achievements);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/achievements', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertAchievementSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const achievement = await storage.createAchievement(data);\n      res.status(201).json(achievement);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/achievements/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertAchievementSchema.partial().parse(req.body);\n      const achievement = await storage.updateAchievement(req.params.id, data);\n      res.json(achievement);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/achievements/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteAchievement(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Study session routes\n  app.get('/api/study-sessions', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const sessions = await storage.getStudySessions(req.user!.id);\n      res.json(sessions);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/study-sessions', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertStudySessionSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const session = await storage.createStudySession(data);\n      res.status(201).json(session);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/study-sessions/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertStudySessionSchema.partial().parse(req.body);\n      const session = await storage.updateStudySession(req.params.id, data);\n      res.json(session);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/study-sessions/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteStudySession(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // People routes\n  app.get('/api/people', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const people = await storage.getPeople(req.user!.id);\n      res.json(people);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/people', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertPersonSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const person = await storage.createPerson(data);\n      res.status(201).json(person);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/people/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertPersonSchema.partial().parse(req.body);\n      const person = await storage.updatePerson(req.params.id, data);\n      res.json(person);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/people/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deletePerson(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Calendar routes\n  app.get('/api/calendar', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const events = await storage.getCalendarEvents(req.user!.id);\n      res.json(events);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/calendar', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertCalendarEventSchema.parse({\n        ...req.body,\n        userId: req.user!.id,\n      });\n      const event = await storage.createCalendarEvent(data);\n      res.status(201).json(event);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put('/api/calendar/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const data = insertCalendarEventSchema.partial().parse(req.body);\n      const event = await storage.updateCalendarEvent(req.params.id, data);\n      res.json(event);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/calendar/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      await storage.deleteCalendarEvent(req.params.id);\n      res.status(204).send();\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // AI Assessment routes\n  app.get('/api/ai-assessments', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const assessments = await storage.getAiAssessments(req.user!.id);\n      res.json(assessments);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/ai-assessments', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const { responses } = req.body;\n      \n      if (!responses || typeof responses !== 'object') {\n        return res.status(400).json({ message: 'Responses are required' });\n      }\n\n      // Generate assessment using OpenRouter\n      const assessment = await generateAssessment(responses);\n      \n      const data = insertAiAssessmentSchema.parse({\n        userId: req.user!.id,\n        responses,\n        growthScore: assessment.growthScore,\n        recommendations: assessment.recommendations,\n      });\n      \n      const savedAssessment = await storage.createAiAssessment(data);\n      res.status(201).json(savedAssessment);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/ai-assessments/latest', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const assessment = await storage.getLatestAiAssessment(req.user!.id);\n      res.json(assessment);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14758},"server/storage.ts":{"content":"import {\n  users,\n  diaryEntries,\n  stories,\n  mistakes,\n  achievements,\n  studySessions,\n  people,\n  calendarEvents,\n  aiAssessments,\n  type User,\n  type InsertUser,\n  type DiaryEntry,\n  type InsertDiaryEntry,\n  type Story,\n  type InsertStory,\n  type Mistake,\n  type InsertMistake,\n  type Achievement,\n  type InsertAchievement,\n  type StudySession,\n  type InsertStudySession,\n  type Person,\n  type InsertPerson,\n  type CalendarEvent,\n  type InsertCalendarEvent,\n  type AiAssessment,\n  type InsertAiAssessment,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Diary operations\n  getDiaryEntries(userId: string): Promise<DiaryEntry[]>;\n  createDiaryEntry(entry: InsertDiaryEntry): Promise<DiaryEntry>;\n  updateDiaryEntry(id: string, entry: Partial<InsertDiaryEntry>): Promise<DiaryEntry>;\n  deleteDiaryEntry(id: string): Promise<void>;\n\n  // Story operations\n  getStories(userId: string): Promise<Story[]>;\n  createStory(story: InsertStory): Promise<Story>;\n  updateStory(id: string, story: Partial<InsertStory>): Promise<Story>;\n  deleteStory(id: string): Promise<void>;\n\n  // Mistake operations\n  getMistakes(userId: string): Promise<Mistake[]>;\n  createMistake(mistake: InsertMistake): Promise<Mistake>;\n  updateMistake(id: string, mistake: Partial<InsertMistake>): Promise<Mistake>;\n  deleteMistake(id: string): Promise<void>;\n\n  // Achievement operations\n  getAchievements(userId: string): Promise<Achievement[]>;\n  createAchievement(achievement: InsertAchievement): Promise<Achievement>;\n  updateAchievement(id: string, achievement: Partial<InsertAchievement>): Promise<Achievement>;\n  deleteAchievement(id: string): Promise<void>;\n\n  // Study session operations\n  getStudySessions(userId: string): Promise<StudySession[]>;\n  createStudySession(session: InsertStudySession): Promise<StudySession>;\n  updateStudySession(id: string, session: Partial<InsertStudySession>): Promise<StudySession>;\n  deleteStudySession(id: string): Promise<void>;\n  getStudySessionsByDateRange(userId: string, startDate: Date, endDate: Date): Promise<StudySession[]>;\n\n  // People operations\n  getPeople(userId: string): Promise<Person[]>;\n  createPerson(person: InsertPerson): Promise<Person>;\n  updatePerson(id: string, person: Partial<InsertPerson>): Promise<Person>;\n  deletePerson(id: string): Promise<void>;\n\n  // Calendar operations\n  getCalendarEvents(userId: string): Promise<CalendarEvent[]>;\n  getCalendarEventsByDateRange(userId: string, startDate: Date, endDate: Date): Promise<CalendarEvent[]>;\n  createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent>;\n  updateCalendarEvent(id: string, event: Partial<InsertCalendarEvent>): Promise<CalendarEvent>;\n  deleteCalendarEvent(id: string): Promise<void>;\n\n  // AI Assessment operations\n  getAiAssessments(userId: string): Promise<AiAssessment[]>;\n  createAiAssessment(assessment: InsertAiAssessment): Promise<AiAssessment>;\n  getLatestAiAssessment(userId: string): Promise<AiAssessment | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Diary operations\n  async getDiaryEntries(userId: string): Promise<DiaryEntry[]> {\n    return await db\n      .select()\n      .from(diaryEntries)\n      .where(eq(diaryEntries.userId, userId))\n      .orderBy(desc(diaryEntries.date));\n  }\n\n  async createDiaryEntry(entry: InsertDiaryEntry): Promise<DiaryEntry> {\n    const [diaryEntry] = await db.insert(diaryEntries).values(entry).returning();\n    return diaryEntry;\n  }\n\n  async updateDiaryEntry(id: string, entry: Partial<InsertDiaryEntry>): Promise<DiaryEntry> {\n    const [diaryEntry] = await db\n      .update(diaryEntries)\n      .set(entry)\n      .where(eq(diaryEntries.id, id))\n      .returning();\n    return diaryEntry;\n  }\n\n  async deleteDiaryEntry(id: string): Promise<void> {\n    await db.delete(diaryEntries).where(eq(diaryEntries.id, id));\n  }\n\n  // Story operations\n  async getStories(userId: string): Promise<Story[]> {\n    return await db\n      .select()\n      .from(stories)\n      .where(eq(stories.userId, userId))\n      .orderBy(desc(stories.updatedAt));\n  }\n\n  async createStory(story: InsertStory): Promise<Story> {\n    const [newStory] = await db.insert(stories).values(story).returning();\n    return newStory;\n  }\n\n  async updateStory(id: string, story: Partial<InsertStory>): Promise<Story> {\n    const [updatedStory] = await db\n      .update(stories)\n      .set({ ...story, updatedAt: new Date() })\n      .where(eq(stories.id, id))\n      .returning();\n    return updatedStory;\n  }\n\n  async deleteStory(id: string): Promise<void> {\n    await db.delete(stories).where(eq(stories.id, id));\n  }\n\n  // Mistake operations\n  async getMistakes(userId: string): Promise<Mistake[]> {\n    return await db\n      .select()\n      .from(mistakes)\n      .where(eq(mistakes.userId, userId))\n      .orderBy(desc(mistakes.date));\n  }\n\n  async createMistake(mistake: InsertMistake): Promise<Mistake> {\n    const [newMistake] = await db.insert(mistakes).values(mistake).returning();\n    return newMistake;\n  }\n\n  async updateMistake(id: string, mistake: Partial<InsertMistake>): Promise<Mistake> {\n    const [updatedMistake] = await db\n      .update(mistakes)\n      .set(mistake)\n      .where(eq(mistakes.id, id))\n      .returning();\n    return updatedMistake;\n  }\n\n  async deleteMistake(id: string): Promise<void> {\n    await db.delete(mistakes).where(eq(mistakes.id, id));\n  }\n\n  // Achievement operations\n  async getAchievements(userId: string): Promise<Achievement[]> {\n    return await db\n      .select()\n      .from(achievements)\n      .where(eq(achievements.userId, userId))\n      .orderBy(desc(achievements.date));\n  }\n\n  async createAchievement(achievement: InsertAchievement): Promise<Achievement> {\n    const [newAchievement] = await db.insert(achievements).values(achievement).returning();\n    return newAchievement;\n  }\n\n  async updateAchievement(id: string, achievement: Partial<InsertAchievement>): Promise<Achievement> {\n    const [updatedAchievement] = await db\n      .update(achievements)\n      .set(achievement)\n      .where(eq(achievements.id, id))\n      .returning();\n    return updatedAchievement;\n  }\n\n  async deleteAchievement(id: string): Promise<void> {\n    await db.delete(achievements).where(eq(achievements.id, id));\n  }\n\n  // Study session operations\n  async getStudySessions(userId: string): Promise<StudySession[]> {\n    return await db\n      .select()\n      .from(studySessions)\n      .where(eq(studySessions.userId, userId))\n      .orderBy(desc(studySessions.date));\n  }\n\n  async createStudySession(session: InsertStudySession): Promise<StudySession> {\n    const [newSession] = await db.insert(studySessions).values(session).returning();\n    return newSession;\n  }\n\n  async updateStudySession(id: string, session: Partial<InsertStudySession>): Promise<StudySession> {\n    const [updatedSession] = await db\n      .update(studySessions)\n      .set(session)\n      .where(eq(studySessions.id, id))\n      .returning();\n    return updatedSession;\n  }\n\n  async deleteStudySession(id: string): Promise<void> {\n    await db.delete(studySessions).where(eq(studySessions.id, id));\n  }\n\n  async getStudySessionsByDateRange(userId: string, startDate: Date, endDate: Date): Promise<StudySession[]> {\n    return await db\n      .select()\n      .from(studySessions)\n      .where(\n        and(\n          eq(studySessions.userId, userId),\n          gte(studySessions.date, startDate),\n          lte(studySessions.date, endDate)\n        )\n      )\n      .orderBy(desc(studySessions.date));\n  }\n\n  // People operations\n  async getPeople(userId: string): Promise<Person[]> {\n    return await db\n      .select()\n      .from(people)\n      .where(eq(people.userId, userId))\n      .orderBy(desc(people.updatedAt));\n  }\n\n  async createPerson(person: InsertPerson): Promise<Person> {\n    const [newPerson] = await db.insert(people).values(person).returning();\n    return newPerson;\n  }\n\n  async updatePerson(id: string, person: Partial<InsertPerson>): Promise<Person> {\n    const [updatedPerson] = await db\n      .update(people)\n      .set({ ...person, updatedAt: new Date() })\n      .where(eq(people.id, id))\n      .returning();\n    return updatedPerson;\n  }\n\n  async deletePerson(id: string): Promise<void> {\n    await db.delete(people).where(eq(people.id, id));\n  }\n\n  // Calendar operations\n  async getCalendarEvents(userId: string): Promise<CalendarEvent[]> {\n    return await db\n      .select()\n      .from(calendarEvents)\n      .where(eq(calendarEvents.userId, userId))\n      .orderBy(calendarEvents.startTime);\n  }\n\n  async getCalendarEventsByDateRange(userId: string, startDate: Date, endDate: Date): Promise<CalendarEvent[]> {\n    return await db\n      .select()\n      .from(calendarEvents)\n      .where(\n        and(\n          eq(calendarEvents.userId, userId),\n          gte(calendarEvents.startTime, startDate),\n          lte(calendarEvents.endTime, endDate)\n        )\n      )\n      .orderBy(calendarEvents.startTime);\n  }\n\n  async createCalendarEvent(event: InsertCalendarEvent): Promise<CalendarEvent> {\n    const [newEvent] = await db.insert(calendarEvents).values(event).returning();\n    return newEvent;\n  }\n\n  async updateCalendarEvent(id: string, event: Partial<InsertCalendarEvent>): Promise<CalendarEvent> {\n    const [updatedEvent] = await db\n      .update(calendarEvents)\n      .set(event)\n      .where(eq(calendarEvents.id, id))\n      .returning();\n    return updatedEvent;\n  }\n\n  async deleteCalendarEvent(id: string): Promise<void> {\n    await db.delete(calendarEvents).where(eq(calendarEvents.id, id));\n  }\n\n  // AI Assessment operations\n  async getAiAssessments(userId: string): Promise<AiAssessment[]> {\n    return await db\n      .select()\n      .from(aiAssessments)\n      .where(eq(aiAssessments.userId, userId))\n      .orderBy(desc(aiAssessments.createdAt));\n  }\n\n  async createAiAssessment(assessment: InsertAiAssessment): Promise<AiAssessment> {\n    const [newAssessment] = await db.insert(aiAssessments).values(assessment).returning();\n    return newAssessment;\n  }\n\n  async getLatestAiAssessment(userId: string): Promise<AiAssessment | undefined> {\n    const [assessment] = await db\n      .select()\n      .from(aiAssessments)\n      .where(eq(aiAssessments.userId, userId))\n      .orderBy(desc(aiAssessments.createdAt))\n      .limit(1);\n    return assessment || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11389},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const diaryEntries = pgTable(\"diary_entries\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  mood: text(\"mood\"),\n  date: timestamp(\"date\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const stories = pgTable(\"stories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  category: text(\"category\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const mistakes = pgTable(\"mistakes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  lesson: text(\"lesson\"),\n  category: text(\"category\"),\n  severity: text(\"severity\"),\n  date: timestamp(\"date\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const achievements = pgTable(\"achievements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\"),\n  date: timestamp(\"date\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const studySessions = pgTable(\"study_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  subject: text(\"subject\").notNull(),\n  topic: text(\"topic\").notNull(),\n  duration: integer(\"duration\").notNull(), // minutes\n  notes: text(\"notes\"),\n  date: timestamp(\"date\").defaultNow().notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const people = pgTable(\"people\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  name: text(\"name\").notNull(),\n  relationship: text(\"relationship\").notNull(),\n  sentiment: text(\"sentiment\").notNull(), // 'positive' or 'negative'\n  description: text(\"description\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const calendarEvents = pgTable(\"calendar_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  startTime: timestamp(\"start_time\").notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  category: text(\"category\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const aiAssessments = pgTable(\"ai_assessments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  responses: jsonb(\"responses\").notNull(),\n  growthScore: integer(\"growth_score\").notNull(),\n  recommendations: text(\"recommendations\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  diaryEntries: many(diaryEntries),\n  stories: many(stories),\n  mistakes: many(mistakes),\n  achievements: many(achievements),\n  studySessions: many(studySessions),\n  people: many(people),\n  calendarEvents: many(calendarEvents),\n  aiAssessments: many(aiAssessments),\n}));\n\nexport const diaryEntriesRelations = relations(diaryEntries, ({ one }) => ({\n  user: one(users, {\n    fields: [diaryEntries.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const storiesRelations = relations(stories, ({ one }) => ({\n  user: one(users, {\n    fields: [stories.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const mistakesRelations = relations(mistakes, ({ one }) => ({\n  user: one(users, {\n    fields: [mistakes.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const achievementsRelations = relations(achievements, ({ one }) => ({\n  user: one(users, {\n    fields: [achievements.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const studySessionsRelations = relations(studySessions, ({ one }) => ({\n  user: one(users, {\n    fields: [studySessions.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const peopleRelations = relations(people, ({ one }) => ({\n  user: one(users, {\n    fields: [people.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const calendarEventsRelations = relations(calendarEvents, ({ one }) => ({\n  user: one(users, {\n    fields: [calendarEvents.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const aiAssessmentsRelations = relations(aiAssessments, ({ one }) => ({\n  user: one(users, {\n    fields: [aiAssessments.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDiaryEntrySchema = createInsertSchema(diaryEntries).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  date: z.string().transform((val) => new Date(val)),\n});\n\nexport const insertStorySchema = createInsertSchema(stories).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMistakeSchema = createInsertSchema(mistakes).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  date: z.string().transform((val) => new Date(val)),\n});\n\nexport const insertAchievementSchema = createInsertSchema(achievements).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  date: z.string().transform((val) => new Date(val)),\n});\n\nexport const insertStudySessionSchema = createInsertSchema(studySessions).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  date: z.string().transform((val) => new Date(val)),\n});\n\nexport const insertPersonSchema = createInsertSchema(people).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCalendarEventSchema = createInsertSchema(calendarEvents).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  startTime: z.string().transform((val) => new Date(val)),\n  endTime: z.string().transform((val) => new Date(val)),\n});\n\nexport const insertAiAssessmentSchema = createInsertSchema(aiAssessments).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type DiaryEntry = typeof diaryEntries.$inferSelect;\nexport type InsertDiaryEntry = z.infer<typeof insertDiaryEntrySchema>;\nexport type Story = typeof stories.$inferSelect;\nexport type InsertStory = z.infer<typeof insertStorySchema>;\nexport type Mistake = typeof mistakes.$inferSelect;\nexport type InsertMistake = z.infer<typeof insertMistakeSchema>;\nexport type Achievement = typeof achievements.$inferSelect;\nexport type InsertAchievement = z.infer<typeof insertAchievementSchema>;\nexport type StudySession = typeof studySessions.$inferSelect;\nexport type InsertStudySession = z.infer<typeof insertStudySessionSchema>;\nexport type Person = typeof people.$inferSelect;\nexport type InsertPerson = z.infer<typeof insertPersonSchema>;\nexport type CalendarEvent = typeof calendarEvents.$inferSelect;\nexport type InsertCalendarEvent = z.infer<typeof insertCalendarEventSchema>;\nexport type AiAssessment = typeof aiAssessments.$inferSelect;\nexport type InsertAiAssessment = z.infer<typeof insertAiAssessmentSchema>;\n","size_bytes":8384},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport Sidebar from \"@/components/Sidebar\";\nimport AnimatedBackground from \"@/components/AnimatedBackground\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Calendar from \"@/pages/Calendar\";\nimport Diary from \"@/pages/Diary\";\nimport Stories from \"@/pages/Stories\";\nimport Mistakes from \"@/pages/Mistakes\";\nimport Achievements from \"@/pages/Achievements\";\nimport StudyTracker from \"@/pages/StudyTracker\";\nimport People from \"@/pages/People\";\nimport AIInterview from \"@/pages/AIInterview\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/calendar\" component={Calendar} />\n      <Route path=\"/diary\" component={Diary} />\n      <Route path=\"/stories\" component={Stories} />\n      <Route path=\"/mistakes\" component={Mistakes} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/study-tracker\" component={StudyTracker} />\n      <Route path=\"/people\" component={People} />\n      <Route path=\"/ai-interview\" component={AIInterview} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction AppLayout() {\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <AnimatedBackground />\n      <Sidebar />\n      <div className=\"flex-1 overflow-auto\">\n        <Router />\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <ProtectedRoute>\n            <AppLayout />\n          </ProtectedRoute>\n          <Toaster />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2066},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(20, 14%, 4%);\n  --foreground: hsl(45, 25%, 91%);\n  --card: hsl(20, 14%, 8%);\n  --card-foreground: hsl(45, 25%, 85%);\n  --popover: hsl(20, 14%, 4%);\n  --popover-foreground: hsl(45, 25%, 91%);\n  --primary: hsl(9, 75%, 61%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(30, 15%, 52%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(20, 14%, 15%);\n  --muted-foreground: hsl(45, 15%, 46%);\n  --accent: hsl(25, 45%, 20%);\n  --accent-foreground: hsl(45, 25%, 85%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 14%, 15%);\n  --input: hsl(20, 14%, 18%);\n  --ring: hsl(9, 75%, 61%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(20, 14%, 8%);\n  --sidebar-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(25, 45%, 20%);\n  --sidebar-accent-foreground: hsl(45, 25%, 85%);\n  --sidebar-border: hsl(20, 14%, 15%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.4rem;\n}\n\n.dark {\n  --background: hsl(20, 14%, 4%);\n  --foreground: hsl(45, 25%, 91%);\n  --card: hsl(20, 14%, 8%);\n  --card-foreground: hsl(45, 25%, 85%);\n  --popover: hsl(20, 14%, 4%);\n  --popover-foreground: hsl(45, 25%, 91%);\n  --primary: hsl(9, 75%, 61%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(30, 15%, 52%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(20, 14%, 15%);\n  --muted-foreground: hsl(45, 15%, 46%);\n  --accent: hsl(25, 45%, 20%);\n  --accent-foreground: hsl(45, 25%, 85%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(20, 14%, 15%);\n  --input: hsl(20, 14%, 18%);\n  --ring: hsl(9, 75%, 61%);\n  --sidebar: hsl(20, 14%, 8%);\n  --sidebar-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(25, 45%, 20%);\n  --sidebar-accent-foreground: hsl(45, 25%, 85%);\n  --sidebar-border: hsl(20, 14%, 15%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n}\n\n@keyframes float {\n  0%, 100% { \n    transform: translateY(0px) rotate(0deg); \n  }\n  50% { \n    transform: translateY(-20px) rotate(180deg); \n  }\n}\n\n@keyframes pulse-glow {\n  0%, 100% { \n    opacity: 0.5; \n  }\n  50% { \n    opacity: 0.8; \n  }\n}\n\n.animated-bg {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n  z-index: -1;\n}\n\n.floating-particle {\n  position: absolute;\n  background: radial-gradient(circle, var(--primary) 0%, transparent 70%);\n  border-radius: 50%;\n  animation: float 6s ease-in-out infinite;\n}\n\n.particle-1 {\n  width: 4px;\n  height: 4px;\n  top: 20%;\n  left: 10%;\n  animation-delay: 0s;\n}\n\n.particle-2 {\n  width: 6px;\n  height: 6px;\n  top: 60%;\n  left: 80%;\n  animation-delay: 2s;\n}\n\n.particle-3 {\n  width: 3px;\n  height: 3px;\n  top: 80%;\n  left: 30%;\n  animation-delay: 4s;\n}\n\n.particle-4 {\n  width: 5px;\n  height: 5px;\n  top: 40%;\n  left: 60%;\n  animation-delay: 1s;\n}\n\n.particle-5 {\n  width: 2px;\n  height: 2px;\n  top: 70%;\n  left: 20%;\n  animation-delay: 3s;\n}\n\n.sidebar-item:hover {\n  background: var(--sidebar-accent);\n  transition: all 0.2s ease;\n}\n\n.card-hover:hover {\n  transform: translateY(-2px);\n  transition: all 0.2s ease;\n}\n\n.progress-bar {\n  transition: width 0.3s ease;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":3963},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport { Request, Response, NextFunction } from 'express';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    username: string;\n    email: string;\n  };\n}\n\nexport const authenticateToken = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.status(403).json({ message: 'Invalid or expired token' });\n    }\n    req.user = user;\n    next();\n  });\n};\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n};\n\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return bcrypt.compare(password, hash);\n};\n\nexport const generateToken = (user: { id: string; username: string; email: string }): string => {\n  return jwt.sign(user, JWT_SECRET, { expiresIn: '24h' });\n};\n","size_bytes":1264},"server/services/openrouter.ts":{"content":"interface OpenRouterResponse {\n  choices: Array<{\n    message: {\n      content: string;\n    };\n  }>;\n}\n\nconst OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;\n\nexport interface AssessmentResponse {\n  growthScore: number;\n  recommendations: string;\n  analysis: string;\n}\n\nexport const generateAssessment = async (responses: Record<string, string>): Promise<AssessmentResponse> => {\n  if (!OPENROUTER_API_KEY) {\n    throw new Error('OPENROUTER_API_KEY is required');\n  }\n\n  const prompt = `Based on the following interview responses, provide a personal growth assessment:\n\n${Object.entries(responses).map(([question, answer]) => `${question}: ${answer}`).join('\\n')}\n\nPlease analyze these responses and provide:\n1. A growth score from 0-100\n2. Specific recommendations for improvement\n3. A brief analysis of current strengths and areas for development\n\nFormat your response as JSON with the following structure:\n{\n  \"growthScore\": number,\n  \"recommendations\": \"detailed recommendations text\",\n  \"analysis\": \"analysis of current state\"\n}`;\n\n  try {\n    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENROUTER_API_KEY}`,\n        'Content-Type': 'application/json',\n        'HTTP-Referer': process.env.HTTP_REFERER || 'http://localhost:5000',\n        'X-Title': 'GrowthTracker Personal Development App',\n      },\n      body: JSON.stringify({\n        model: 'mistralai/mistral-7b-instruct:free',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are a personal development coach and assessment expert. Provide constructive, actionable feedback based on user responses.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        temperature: 0.7,\n        max_tokens: 1000,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`OpenRouter API error: ${response.statusText}`);\n    }\n\n    const data: OpenRouterResponse = await response.json();\n    const content = data.choices[0]?.message?.content;\n\n    if (!content) {\n      throw new Error('No response from AI model');\n    }\n\n    try {\n      const parsed = JSON.parse(content);\n      return {\n        growthScore: Math.min(Math.max(parsed.growthScore || 0, 0), 100),\n        recommendations: parsed.recommendations || 'Continue working on your personal development goals.',\n        analysis: parsed.analysis || 'Keep up the good work on your growth journey.',\n      };\n    } catch (parseError) {\n      // Fallback if JSON parsing fails\n      return {\n        growthScore: 70,\n        recommendations: content,\n        analysis: 'Based on your responses, there are opportunities for continued growth and development.',\n      };\n    }\n  } catch (error) {\n    console.error('OpenRouter API error:', error);\n    throw new Error('Failed to generate assessment. Please try again later.');\n  }\n};\n","size_bytes":2947},"client/src/components/AnimatedBackground.tsx":{"content":"const AnimatedBackground = () => {\n  return (\n    <div className=\"animated-bg\">\n      <div className=\"floating-particle particle-1\"></div>\n      <div className=\"floating-particle particle-2\"></div>\n      <div className=\"floating-particle particle-3\"></div>\n      <div className=\"floating-particle particle-4\"></div>\n      <div className=\"floating-particle particle-5\"></div>\n    </div>\n  );\n};\n\nexport default AnimatedBackground;\n","size_bytes":430},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from '@/hooks/useAuth';\nimport Auth from '@/pages/Auth';\nimport { Skeleton } from '@/components/ui/skeleton';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute = ({ children }: ProtectedRouteProps) => {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen flex items-center justify-center bg-background\">\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-4 w-32\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Auth />;\n  }\n\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n","size_bytes":700},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { \n  Home, \n  Calendar, \n  BookOpen, \n  PenTool, \n  AlertTriangle, \n  Trophy, \n  GraduationCap, \n  Users, \n  Brain,\n  ChartLine,\n  User,\n  LogOut\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nconst sidebarItems = [\n  { path: '/', icon: Home, label: 'Dashboard' },\n  { path: '/calendar', icon: Calendar, label: 'Calendar' },\n  { path: '/diary', icon: BookOpen, label: 'Diary' },\n  { path: '/stories', icon: PenTool, label: 'Stories' },\n  { path: '/mistakes', icon: AlertTriangle, label: 'Mistakes' },\n  { path: '/achievements', icon: Trophy, label: 'Achievements' },\n  { path: '/study-tracker', icon: GraduationCap, label: 'Study Tracker' },\n  { path: '/people', icon: Users, label: 'People' },\n  { path: '/ai-interview', icon: Brain, label: 'AI Interview' },\n];\n\nconst Sidebar = () => {\n  const [location] = useLocation();\n  const { user, signOut } = useAuth();\n\n  return (\n    <div className=\"w-64 bg-sidebar border-r border-sidebar-border flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo/Brand */}\n      <div className=\"p-6 border-b border-sidebar-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n            <ChartLine className=\"text-primary-foreground text-sm\" />\n          </div>\n          <h1 className=\"text-xl font-bold text-sidebar-foreground\">GrowthTracker</h1>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {sidebarItems.map(({ path, icon: Icon, label }) => (\n          <Link key={path} href={path}>\n            <div\n              className={`sidebar-item rounded-lg p-3 cursor-pointer ${\n                location === path ? 'bg-sidebar-accent' : ''\n              }`}\n              data-testid={`nav-${label.toLowerCase().replace(' ', '-')}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Icon \n                  className={`${\n                    location === path ? 'text-sidebar-primary' : 'text-muted-foreground'\n                  }`} \n                  size={20} \n                />\n                <span className=\"text-sidebar-foreground font-medium\">{label}</span>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-sidebar-border\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n              <User className=\"text-primary-foreground\" size={20} />\n            </div>\n            <div>\n              <p className=\"text-sm font-medium text-sidebar-foreground\" data-testid=\"user-name\">\n                {user?.firstName} {user?.lastName}\n              </p>\n              <p className=\"text-xs text-muted-foreground\" data-testid=\"user-email\">\n                {user?.email}\n              </p>\n            </div>\n          </div>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\" \n            onClick={signOut}\n            data-testid=\"button-signout\"\n          >\n            <LogOut size={16} />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","size_bytes":3427},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User, AuthState } from '@/types';\n\ninterface AuthContextType extends AuthState {\n  signIn: (email: string, password: string) => Promise<void>;\n  signUp: (data: any) => Promise<void>;\n  signOut: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    token: null,\n    isLoading: true,\n    isAuthenticated: false,\n  });\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Verify token and get user data\n      fetch('/api/auth/me', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      })\n        .then(res => res.json())\n        .then(user => {\n          setState({\n            user,\n            token,\n            isLoading: false,\n            isAuthenticated: true,\n          });\n        })\n        .catch(() => {\n          localStorage.removeItem('token');\n          setState({\n            user: null,\n            token: null,\n            isLoading: false,\n            isAuthenticated: false,\n          });\n        });\n    } else {\n      setState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, []);\n\n  const signIn = async (email: string, password: string) => {\n    const response = await fetch('/api/auth/signin', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n\n    const { user, token } = await response.json();\n    localStorage.setItem('token', token);\n    setState({\n      user,\n      token,\n      isLoading: false,\n      isAuthenticated: true,\n    });\n  };\n\n  const signUp = async (data: any) => {\n    const response = await fetch('/api/auth/signup', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n\n    const { user, token } = await response.json();\n    localStorage.setItem('token', token);\n    setState({\n      user,\n      token,\n      isLoading: false,\n      isAuthenticated: true,\n    });\n  };\n\n  const signOut = () => {\n    localStorage.removeItem('token');\n    setState({\n      user: null,\n      token: null,\n      isLoading: false,\n      isAuthenticated: false,\n    });\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        signIn,\n        signUp,\n        signOut,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","size_bytes":3067},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1761},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIInterview.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Brain, ArrowRight, ArrowLeft, CheckCircle, Clock, TrendingUp } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO } from 'date-fns';\n\nconst questions = [\n  {\n    id: 1,\n    question: \"Do you stick to your goals every day?\",\n    options: [\n      { value: \"very-consistent\", label: \"Yes - I work on my goals every day\" },\n      { value: \"mostly-consistent\", label: \"Most of the time - I follow my plans usually\" },\n      { value: \"somewhat-consistent\", label: \"Sometimes - I find it hard sometimes\" },\n      { value: \"inconsistent\", label: \"Not really - I often lose interest\" }\n    ]\n  },\n  {\n    id: 2,\n    question: \"What do you do when things don't go as planned?\",\n    options: [\n      { value: \"learn-adapt\", label: \"I learn from mistakes and try a new way\" },\n      { value: \"persistent\", label: \"I keep trying the same way\" },\n      { value: \"discouraged\", label: \"I feel sad but then try again later\" },\n      { value: \"give-up\", label: \"I usually stop and try something else\" }\n    ]\n  },\n  {\n    id: 3,\n    question: \"How often do you think about how you're doing?\",\n    options: [\n      { value: \"daily\", label: \"Every day - I check how I'm doing daily\" },\n      { value: \"weekly\", label: \"Once a week - I think about it weekly\" },\n      { value: \"monthly\", label: \"Once a month - I review monthly\" },\n      { value: \"rarely\", label: \"Not often - I don't have a regular time\" }\n    ]\n  },\n  {\n    id: 4,\n    question: \"What makes you want to improve yourself?\",\n    options: [\n      { value: \"intrinsic\", label: \"Feeling good about myself inside\" },\n      { value: \"achievement\", label: \"Reaching goals I set for myself\" },\n      { value: \"social\", label: \"Getting praise from other people\" },\n      { value: \"future\", label: \"Making life better for me and others\" }\n    ]\n  },\n  {\n    id: 5,\n    question: \"Do you have enough time for work, friends, health, and fun?\",\n    options: [\n      { value: \"excellent\", label: \"Yes - I have good balance in all areas\" },\n      { value: \"good\", label: \"Mostly - Most things are balanced well\" },\n      { value: \"struggling\", label: \"No - Some things take too much time\" },\n      { value: \"poor\", label: \"No - I spend too much time on one thing\" }\n    ]\n  }\n];\n\nconst AIInterview = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [responses, setResponses] = useState<Record<string, string>>({});\n  const [selectedOption, setSelectedOption] = useState('');\n  const [isStarted, setIsStarted] = useState(false);\n  const [isCompleted, setIsCompleted] = useState(false);\n\n  const { data: latestAssessment } = useQuery({\n    queryKey: ['/api/ai-assessments/latest'],\n  });\n\n  const { data: allAssessments } = useQuery({\n    queryKey: ['/api/ai-assessments'],\n  });\n\n  const createAssessmentMutation = useMutation({\n    mutationFn: (data: { responses: Record<string, string> }) => \n      apiRequest('POST', '/api/ai-assessments', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-assessments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/ai-assessments/latest'] });\n      setIsCompleted(true);\n      toast({\n        title: 'Assessment Complete!',\n        description: 'Your personal growth assessment has been generated.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to complete assessment',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleStart = () => {\n    setIsStarted(true);\n    setCurrentQuestion(0);\n    setResponses({});\n    setSelectedOption('');\n    setIsCompleted(false);\n  };\n\n  const handleOptionSelect = (value: string) => {\n    setSelectedOption(value);\n  };\n\n  const handleNext = () => {\n    if (!selectedOption) return;\n\n    const questionKey = `Question ${currentQuestion + 1}`;\n    const selectedOptionLabel = questions[currentQuestion].options.find(\n      opt => opt.value === selectedOption\n    )?.label || selectedOption;\n\n    const newResponses = {\n      ...responses,\n      [questionKey]: selectedOptionLabel\n    };\n    setResponses(newResponses);\n\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n      setSelectedOption('');\n    } else {\n      // Complete the assessment\n      createAssessmentMutation.mutate({ responses: newResponses });\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentQuestion > 0) {\n      setCurrentQuestion(currentQuestion - 1);\n      const prevQuestionKey = `Question ${currentQuestion}`;\n      const prevResponse = responses[prevQuestionKey];\n      const prevOption = questions[currentQuestion - 1].options.find(\n        opt => opt.label === prevResponse\n      )?.value || '';\n      setSelectedOption(prevOption);\n    }\n  };\n\n  const progress = isCompleted ? 100 : ((currentQuestion + (selectedOption ? 1 : 0)) / questions.length) * 100;\n\n  if (!isStarted) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold text-foreground\">AI Personal Growth Assessment</h1>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Start Assessment Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-3\">\n                <Brain className=\"text-primary\" size={24} />\n                <span>5-Minute Growth Assessment</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"bg-muted rounded-lg p-6 space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"text-chart-1\" size={20} />\n                  <span className=\"font-medium text-card-foreground\">Quick & Insightful</span>\n                </div>\n                <p className=\"text-muted-foreground\">\n                  Take a brief 5-question assessment to get personalized insights about your growth journey.\n                </p>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h3 className=\"font-semibold text-card-foreground\">What you'll get:</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"text-chart-2\" size={16} />\n                    <span className=\"text-sm text-muted-foreground\">Personalized growth score (0-100)</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"text-chart-2\" size={16} />\n                    <span className=\"text-sm text-muted-foreground\">AI-powered recommendations</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle className=\"text-chart-2\" size={16} />\n                    <span className=\"text-sm text-muted-foreground\">Progress tracking over time</span>\n                  </div>\n                </div>\n              </div>\n\n              <Button \n                className=\"w-full\" \n                onClick={handleStart}\n                data-testid=\"button-start-assessment\"\n              >\n                <Brain className=\"mr-2\" size={16} />\n                Start Assessment\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Latest Results Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-3\">\n                <TrendingUp className=\"text-chart-4\" size={24} />\n                <span>Your Latest Results</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {latestAssessment ? (\n                <div className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold text-chart-4 mb-2\">\n                      {latestAssessment.growthScore}\n                    </div>\n                    <p className=\"text-muted-foreground\">Growth Score</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {format(parseISO(latestAssessment.createdAt), 'MMM d, yyyy')}\n                    </p>\n                  </div>\n\n                  <Progress value={latestAssessment.growthScore} className=\"h-3\" />\n\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <h4 className=\"font-medium text-card-foreground mb-2\">AI Recommendations</h4>\n                    <p className=\"text-sm text-muted-foreground line-clamp-4\">\n                      {latestAssessment.recommendations}\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Brain className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <p className=\"text-muted-foreground\">\n                    Take your first assessment to see your growth insights here\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Assessment History */}\n        {allAssessments && allAssessments.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Assessment History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {allAssessments.slice(0, 5).map((assessment: any) => (\n                  <div\n                    key={assessment.id}\n                    className=\"flex items-center justify-between p-4 bg-muted rounded-lg\"\n                    data-testid={`assessment-${assessment.id}`}\n                  >\n                    <div>\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"text-lg font-semibold text-card-foreground\">\n                          Score: {assessment.growthScore}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {format(parseISO(assessment.createdAt), 'MMM d, yyyy')}\n                        </div>\n                      </div>\n                    </div>\n                    <Progress value={assessment.growthScore} className=\"w-24 h-2\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    );\n  }\n\n  if (isCompleted) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        <div className=\"text-center\">\n          <CheckCircle className=\"mx-auto h-16 w-16 text-chart-2 mb-4\" />\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Assessment Complete!</h1>\n          <p className=\"text-muted-foreground\">\n            Your personal growth assessment has been generated and saved.\n          </p>\n        </div>\n\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardContent className=\"p-8 text-center space-y-6\">\n            <div>\n              <div className=\"text-5xl font-bold text-chart-4 mb-2\">\n                {latestAssessment?.growthScore || 'Processing...'}\n              </div>\n              <p className=\"text-muted-foreground\">Your Growth Score</p>\n            </div>\n\n            {latestAssessment && (\n              <>\n                <Progress value={latestAssessment.growthScore} className=\"h-4\" />\n\n                <div className=\"bg-muted rounded-lg p-6 text-left\">\n                  <h3 className=\"font-semibold text-card-foreground mb-3\">AI Recommendations</h3>\n                  <p className=\"text-muted-foreground whitespace-pre-wrap\">\n                    {latestAssessment.recommendations}\n                  </p>\n                </div>\n              </>\n            )}\n\n            <div className=\"flex space-x-4 justify-center\">\n              <Button \n                onClick={() => setIsStarted(false)} \n                variant=\"outline\"\n                data-testid=\"button-view-results\"\n              >\n                View All Results\n              </Button>\n              <Button \n                onClick={handleStart}\n                data-testid=\"button-retake-assessment\"\n              >\n                Take Again\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">AI Assessment</h1>\n        <div className=\"text-sm text-muted-foreground\">\n          Question {currentQuestion + 1} of {questions.length}\n        </div>\n      </div>\n\n      <Card className=\"max-w-2xl mx-auto\">\n        <CardHeader>\n          <div className=\"space-y-4\">\n            <Progress value={progress} className=\"h-2\" />\n            <CardTitle className=\"text-xl\">\n              {questions[currentQuestion].question}\n            </CardTitle>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"space-y-3\">\n            {questions[currentQuestion].options.map((option) => (\n              <button\n                key={option.value}\n                onClick={() => handleOptionSelect(option.value)}\n                className={`\n                  w-full text-left p-4 rounded-lg transition-colors border\n                  ${selectedOption === option.value \n                    ? 'bg-primary text-primary-foreground border-primary' \n                    : 'bg-accent hover:bg-primary hover:text-primary-foreground border-border'\n                  }\n                `}\n                data-testid={`option-${option.value}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle \n                    className={selectedOption === option.value ? 'text-primary-foreground' : 'text-muted-foreground'}\n                    size={16} \n                  />\n                  <span className=\"font-medium\">{option.label}</span>\n                </div>\n              </button>\n            ))}\n          </div>\n\n          <div className=\"flex justify-between items-center pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={handlePrevious}\n              disabled={currentQuestion === 0}\n              data-testid=\"button-previous\"\n            >\n              <ArrowLeft className=\"mr-2\" size={16} />\n              Previous\n            </Button>\n\n            <Button\n              onClick={handleNext}\n              disabled={!selectedOption || createAssessmentMutation.isPending}\n              data-testid=\"button-next\"\n            >\n              {currentQuestion === questions.length - 1 ? (\n                createAssessmentMutation.isPending ? (\n                  'Generating Results...'\n                ) : (\n                  'Complete Assessment'\n                )\n              ) : (\n                <>\n                  Next\n                  <ArrowRight className=\"ml-2\" size={16} />\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AIInterview;\n","size_bytes":15733},"client/src/pages/Achievements.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Trophy, Plus, Edit, Trash2, Calendar, Star } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO } from 'date-fns';\nimport { formatDateForInput, formatDateForDisplay, getCurrentIST } from '@/lib/timeUtils';\n\nconst Achievements = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingAchievement, setEditingAchievement] = useState<any>(null);\n\n  const [achievementForm, setAchievementForm] = useState({\n    title: '',\n    description: '',\n    category: '',\n    date: formatDateForInput(getCurrentIST())\n  });\n\n  const { data: achievements, isLoading } = useQuery({\n    queryKey: ['/api/achievements'],\n  });\n\n  const createAchievementMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/achievements', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/achievements'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Achievement recorded successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateAchievementMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/achievements/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/achievements'] });\n      setIsDialogOpen(false);\n      setEditingAchievement(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Achievement updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteAchievementMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/achievements/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/achievements'] });\n      toast({\n        title: 'Success',\n        description: 'Achievement deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setAchievementForm({\n      title: '',\n      description: '',\n      category: '',\n      date: formatDateForInput(getCurrentIST())\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const achievementData = {\n      ...achievementForm,\n      date: new Date(achievementForm.date).toISOString(),\n    };\n\n    if (editingAchievement) {\n      updateAchievementMutation.mutate({ id: editingAchievement.id, ...achievementData });\n    } else {\n      createAchievementMutation.mutate(achievementData);\n    }\n  };\n\n  const handleEdit = (achievement: any) => {\n    setEditingAchievement(achievement);\n    setAchievementForm({\n      title: achievement.title,\n      description: achievement.description,\n      category: achievement.category || '',\n      date: formatDateForInput(achievement.date)\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this achievement?')) {\n      deleteAchievementMutation.mutate(id);\n    }\n  };\n\n  const categoryColors: Record<string, string> = {\n    'personal': 'bg-chart-1 text-white',\n    'professional': 'bg-chart-2 text-white',\n    'academic': 'bg-chart-3 text-white',\n    'fitness': 'bg-chart-4 text-white',\n    'creative': 'bg-chart-5 text-white',\n    'default': 'bg-primary text-primary-foreground'\n  };\n\n  const getCategoryColor = (category: string) => {\n    const normalizedCategory = category?.toLowerCase() || '';\n    return categoryColors[normalizedCategory] || categoryColors['default'];\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Achievements</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-achievement\">\n              <Plus className=\"mr-2\" size={16} />\n              Add Achievement\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingAchievement ? 'Edit Achievement' : 'Add New Achievement'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={achievementForm.title}\n                  onChange={(e) => setAchievementForm({ ...achievementForm, title: e.target.value })}\n                  placeholder=\"What did you accomplish?\"\n                  required\n                  data-testid=\"input-achievement-title\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date\">Date</Label>\n                  <Input\n                    id=\"date\"\n                    type=\"date\"\n                    value={achievementForm.date}\n                    onChange={(e) => setAchievementForm({ ...achievementForm, date: e.target.value })}\n                    required\n                    data-testid=\"input-achievement-date\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Input\n                    id=\"category\"\n                    value={achievementForm.category}\n                    onChange={(e) => setAchievementForm({ ...achievementForm, category: e.target.value })}\n                    placeholder=\"e.g., Personal, Professional, Academic\"\n                    data-testid=\"input-achievement-category\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={achievementForm.description}\n                  onChange={(e) => setAchievementForm({ ...achievementForm, description: e.target.value })}\n                  placeholder=\"Describe your achievement and why it's meaningful to you...\"\n                  className=\"min-h-[120px]\"\n                  required\n                  data-testid=\"textarea-achievement-description\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingAchievement(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-achievement\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createAchievementMutation.isPending || updateAchievementMutation.isPending}\n                  data-testid=\"button-save-achievement\"\n                >\n                  {editingAchievement ? 'Update Achievement' : 'Add Achievement'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {achievements?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Trophy className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No achievements yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start celebrating your wins, big and small\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-achievement\">\n              <Plus className=\"mr-2\" size={16} />\n              Add First Achievement\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {achievements?.map((achievement: any) => (\n            <Card key={achievement.id} className=\"card-hover\" data-testid={`achievement-${achievement.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-12 h-12 bg-chart-3 bg-opacity-20 rounded-lg flex items-center justify-center\">\n                      <Trophy className=\"text-chart-3\" size={20} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-xl mb-2\">{achievement.title}</CardTitle>\n                      <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                        <div className=\"flex items-center space-x-1\">\n                          <Calendar size={14} />\n                          <span>{formatDateForDisplay(achievement.date)}</span>\n                        </div>\n                        {achievement.category && (\n                          <span className={`px-2 py-1 rounded text-xs ${getCategoryColor(achievement.category)}`}>\n                            {achievement.category}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(achievement)}\n                      data-testid={`button-edit-achievement-${achievement.id}`}\n                    >\n                      <Edit size={16} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(achievement.id)}\n                      data-testid={`button-delete-achievement-${achievement.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-card-foreground whitespace-pre-wrap\">{achievement.description}</p>\n                <div className=\"flex items-center mt-4 text-sm text-muted-foreground\">\n                  <Star className=\"text-chart-3 mr-1\" size={14} />\n                  <span>Achievement unlocked!</span>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Achievements;\n","size_bytes":12184},"client/src/pages/Auth.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { ChartLine } from 'lucide-react';\nimport AnimatedBackground from '@/components/AnimatedBackground';\n\nconst signInSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(1, 'Password is required'),\n});\n\nconst signUpSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string().min(1, 'Please confirm your password'),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignInData = z.infer<typeof signInSchema>;\ntype SignUpData = z.infer<typeof signUpSchema>;\n\nconst Auth = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { signIn, signUp } = useAuth();\n  const { toast } = useToast();\n\n  const signInForm = useForm<SignInData>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const signUpForm = useForm<SignUpData>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      username: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n  });\n\n  const onSignIn = async (data: SignInData) => {\n    setIsLoading(true);\n    try {\n      await signIn(data.email, data.password);\n    } catch (error: any) {\n      toast({\n        title: 'Sign In Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const onSignUp = async (data: SignUpData) => {\n    setIsLoading(true);\n    try {\n      await signUp(data);\n    } catch (error: any) {\n      toast({\n        title: 'Sign Up Failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <AnimatedBackground />\n      \n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <ChartLine className=\"text-primary-foreground\" size={24} />\n            </div>\n            <CardTitle className=\"text-2xl font-bold\">GrowthTracker</CardTitle>\n          </div>\n          <CardDescription>\n            Track your personal growth journey with AI-powered insights\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Tabs defaultValue=\"signin\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"signin\" data-testid=\"tab-signin\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"signup\" data-testid=\"tab-signup\">Sign Up</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"signin\" className=\"space-y-4\">\n              <form onSubmit={signInForm.handleSubmit(onSignIn)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-email\">Email</Label>\n                  <Input\n                    id=\"signin-email\"\n                    type=\"email\"\n                    {...signInForm.register('email')}\n                    data-testid=\"input-signin-email\"\n                  />\n                  {signInForm.formState.errors.email && (\n                    <p className=\"text-sm text-destructive\">\n                      {signInForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signin-password\">Password</Label>\n                  <Input\n                    id=\"signin-password\"\n                    type=\"password\"\n                    {...signInForm.register('password')}\n                    data-testid=\"input-signin-password\"\n                  />\n                  {signInForm.formState.errors.password && (\n                    <p className=\"text-sm text-destructive\">\n                      {signInForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-signin\"\n                >\n                  {isLoading ? 'Signing In...' : 'Sign In'}\n                </Button>\n              </form>\n            </TabsContent>\n            \n            <TabsContent value=\"signup\" className=\"space-y-4\">\n              <form onSubmit={signUpForm.handleSubmit(onSignUp)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstname\">First Name</Label>\n                    <Input\n                      id=\"firstname\"\n                      {...signUpForm.register('firstName')}\n                      data-testid=\"input-firstname\"\n                    />\n                    {signUpForm.formState.errors.firstName && (\n                      <p className=\"text-sm text-destructive\">\n                        {signUpForm.formState.errors.firstName.message}\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lastname\">Last Name</Label>\n                    <Input\n                      id=\"lastname\"\n                      {...signUpForm.register('lastName')}\n                      data-testid=\"input-lastname\"\n                    />\n                    {signUpForm.formState.errors.lastName && (\n                      <p className=\"text-sm text-destructive\">\n                        {signUpForm.formState.errors.lastName.message}\n                      </p>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Username</Label>\n                  <Input\n                    id=\"username\"\n                    {...signUpForm.register('username')}\n                    data-testid=\"input-username\"\n                  />\n                  {signUpForm.formState.errors.username && (\n                    <p className=\"text-sm text-destructive\">\n                      {signUpForm.formState.errors.username.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-email\">Email</Label>\n                  <Input\n                    id=\"signup-email\"\n                    type=\"email\"\n                    {...signUpForm.register('email')}\n                    data-testid=\"input-signup-email\"\n                  />\n                  {signUpForm.formState.errors.email && (\n                    <p className=\"text-sm text-destructive\">\n                      {signUpForm.formState.errors.email.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"signup-password\">Password</Label>\n                  <Input\n                    id=\"signup-password\"\n                    type=\"password\"\n                    {...signUpForm.register('password')}\n                    data-testid=\"input-signup-password\"\n                  />\n                  {signUpForm.formState.errors.password && (\n                    <p className=\"text-sm text-destructive\">\n                      {signUpForm.formState.errors.password.message}\n                    </p>\n                  )}\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    {...signUpForm.register('confirmPassword')}\n                    data-testid=\"input-confirm-password\"\n                  />\n                  {signUpForm.formState.errors.confirmPassword && (\n                    <p className=\"text-sm text-destructive\">\n                      {signUpForm.formState.errors.confirmPassword.message}\n                    </p>\n                  )}\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isLoading}\n                  data-testid=\"button-signup\"\n                >\n                  {isLoading ? 'Creating Account...' : 'Create Account'}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default Auth;\n","size_bytes":9806},"client/src/pages/Calendar.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Calendar as CalendarIcon, Plus, Edit, Trash2 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameDay, parseISO } from 'date-fns';\nimport { getCurrentIST, formatDateTimeForInput, formatDateForDisplay, formatTimeForDisplay, isSameDayIST } from '@/lib/timeUtils';\n\nconst Calendar = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedDate, setSelectedDate] = useState(getCurrentIST());\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<any>(null);\n\n  const [eventForm, setEventForm] = useState({\n    title: '',\n    description: '',\n    startTime: '',\n    endTime: '',\n    category: ''\n  });\n\n  const { data: events, isLoading } = useQuery({\n    queryKey: ['/api/calendar'],\n  });\n\n  const createEventMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/calendar', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Event created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateEventMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/calendar/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar'] });\n      setIsDialogOpen(false);\n      setEditingEvent(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Event updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteEventMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/calendar/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/calendar'] });\n      toast({\n        title: 'Success',\n        description: 'Event deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setEventForm({\n      title: '',\n      description: '',\n      startTime: '',\n      endTime: '',\n      category: ''\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const eventData = {\n      ...eventForm,\n      startTime: new Date(eventForm.startTime).toISOString(),\n      endTime: new Date(eventForm.endTime).toISOString(),\n    };\n\n    if (editingEvent) {\n      updateEventMutation.mutate({ id: editingEvent.id, ...eventData });\n    } else {\n      createEventMutation.mutate(eventData);\n    }\n  };\n\n  const handleEdit = (event: any) => {\n    setEditingEvent(event);\n    setEventForm({\n      title: event.title,\n      description: event.description || '',\n      startTime: formatDateTimeForInput(event.startTime),\n      endTime: formatDateTimeForInput(event.endTime),\n      category: event.category || ''\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this event?')) {\n      deleteEventMutation.mutate(id);\n    }\n  };\n\n  // Generate calendar days\n  const monthStart = startOfMonth(selectedDate);\n  const monthEnd = endOfMonth(selectedDate);\n  const days = eachDayOfInterval({ start: monthStart, end: monthEnd });\n\n  // Get events for selected date (using IST)\n  const selectedDateEvents = events?.filter((event: any) => \n    isSameDayIST(event.startTime, selectedDate)\n  ) || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"h-64 bg-muted rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Calendar</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-event\">\n              <Plus className=\"mr-2\" size={16} />\n              New Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {editingEvent ? 'Edit Event' : 'Create New Event'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={eventForm.title}\n                  onChange={(e) => setEventForm({ ...eventForm, title: e.target.value })}\n                  required\n                  data-testid=\"input-event-title\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={eventForm.description}\n                  onChange={(e) => setEventForm({ ...eventForm, description: e.target.value })}\n                  data-testid=\"textarea-event-description\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"startTime\">Start Time</Label>\n                  <Input\n                    id=\"startTime\"\n                    type=\"datetime-local\"\n                    value={eventForm.startTime}\n                    onChange={(e) => setEventForm({ ...eventForm, startTime: e.target.value })}\n                    required\n                    data-testid=\"input-start-time\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"endTime\">End Time</Label>\n                  <Input\n                    id=\"endTime\"\n                    type=\"datetime-local\"\n                    value={eventForm.endTime}\n                    onChange={(e) => setEventForm({ ...eventForm, endTime: e.target.value })}\n                    required\n                    data-testid=\"input-end-time\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <Input\n                  id=\"category\"\n                  value={eventForm.category}\n                  onChange={(e) => setEventForm({ ...eventForm, category: e.target.value })}\n                  placeholder=\"e.g., Study, Personal, Work\"\n                  data-testid=\"input-event-category\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingEvent(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-event\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createEventMutation.isPending || updateEventMutation.isPending}\n                  data-testid=\"button-save-event\"\n                >\n                  {editingEvent ? 'Update Event' : 'Create Event'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Calendar Grid */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CalendarIcon size={20} />\n                  <span>{format(selectedDate, 'MMMM yyyy')}</span>\n                </CardTitle>\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() - 1))}\n                    data-testid=\"button-prev-month\"\n                  >\n                    ←\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSelectedDate(new Date())}\n                    data-testid=\"button-today\"\n                  >\n                    Today\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setSelectedDate(new Date(selectedDate.getFullYear(), selectedDate.getMonth() + 1))}\n                    data-testid=\"button-next-month\"\n                  >\n                    →\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-7 gap-1 text-center text-sm mb-2\">\n                {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                  <div key={day} className=\"p-2 text-muted-foreground font-medium\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              <div className=\"grid grid-cols-7 gap-1\">\n                {days.map(day => {\n                  const dayEvents = events?.filter((event: any) => \n                    isSameDayIST(event.startTime, day)\n                  ) || [];\n                  const isSelected = isSameDay(day, selectedDate);\n                  const isToday = isSameDay(day, new Date());\n                  \n                  return (\n                    <button\n                      key={day.toString()}\n                      onClick={() => setSelectedDate(day)}\n                      className={`\n                        p-2 text-sm rounded transition-colors relative\n                        ${isSelected ? 'bg-primary text-primary-foreground' : ''}\n                        ${isToday && !isSelected ? 'bg-accent text-accent-foreground' : ''}\n                        ${!isSelected && !isToday ? 'hover:bg-muted' : ''}\n                      `}\n                      data-testid={`calendar-day-${format(day, 'yyyy-MM-dd')}`}\n                    >\n                      {format(day, 'd')}\n                      {dayEvents.length > 0 && (\n                        <div className=\"absolute bottom-1 left-1/2 transform -translate-x-1/2\">\n                          <div className=\"w-1 h-1 bg-chart-1 rounded-full\"></div>\n                        </div>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Selected Date Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              Events for {formatDateForDisplay(selectedDate)}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {selectedDateEvents.length === 0 ? (\n              <p className=\"text-muted-foreground text-center py-8\">\n                No events scheduled for this day\n              </p>\n            ) : (\n              <div className=\"space-y-3\">\n                {selectedDateEvents.map((event: any) => (\n                  <div\n                    key={event.id}\n                    className=\"bg-muted rounded-lg p-3\"\n                    data-testid={`event-${event.id}`}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-medium text-card-foreground\">{event.title}</h4>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {formatTimeForDisplay(event.startTime)} - {formatTimeForDisplay(event.endTime)}\n                        </p>\n                        {event.description && (\n                          <p className=\"text-sm text-muted-foreground mt-2\">\n                            {event.description}\n                          </p>\n                        )}\n                        {event.category && (\n                          <span className=\"inline-block bg-primary text-primary-foreground px-2 py-1 rounded text-xs mt-2\">\n                            {event.category}\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-1 ml-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(event)}\n                          data-testid={`button-edit-event-${event.id}`}\n                        >\n                          <Edit size={14} />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(event.id)}\n                          data-testid={`button-delete-event-${event.id}`}\n                        >\n                          <Trash2 size={14} />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n","size_bytes":14751},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Calendar, Clock, Book, Trophy, ChartLine, Plus, BookOpen, GraduationCap, AlertTriangle, Brain } from 'lucide-react';\nimport { Link } from 'wouter';\nimport { Progress } from '@/components/ui/progress';\nimport { getCurrentIST, getCurrentDateFormatted, isSameDayIST } from '@/lib/timeUtils';\n\nconst Dashboard = () => {\n  const { user } = useAuth();\n  \n  const { data: studySessions } = useQuery({\n    queryKey: ['/api/study-sessions'],\n  });\n\n  const { data: diaryEntries } = useQuery({\n    queryKey: ['/api/diary'],\n  });\n\n  const { data: achievements } = useQuery({\n    queryKey: ['/api/achievements'],\n  });\n\n  const { data: latestAssessment } = useQuery({\n    queryKey: ['/api/ai-assessments/latest'],\n  });\n\n  // Calculate stats (using IST)\n  const todayStudyHours = studySessions?.filter((session: any) => {\n    const today = getCurrentIST();\n    return isSameDayIST(session.date, today);\n  }).reduce((total: number, session: any) => total + (session.duration / 60), 0) || 0;\n\n  const thisWeekEntries = diaryEntries?.filter((entry: any) => {\n    const today = getCurrentIST();\n    const weekAgo = new Date(today);\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    const entryDate = new Date(entry.date);\n    return entryDate >= weekAgo;\n  }).length || 0;\n\n  const thisMonthAchievements = achievements?.filter((achievement: any) => {\n    const today = getCurrentIST();\n    const monthAgo = new Date(today);\n    monthAgo.setMonth(monthAgo.getMonth() - 1);\n    const achievementDate = new Date(achievement.date);\n    return achievementDate >= monthAgo;\n  }).length || 0;\n\n  const studySubjects = studySessions?.reduce((acc: Record<string, {total: number, completed: number}>, session: any) => {\n    if (!acc[session.subject]) {\n      acc[session.subject] = { total: 0, completed: 0 };\n    }\n    acc[session.subject].total += session.duration;\n    acc[session.subject].completed += 1;\n    return acc;\n  }, {}) || {};\n\n  return (\n    <div className=\"p-6 space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"greeting\">\n            Good morning, {user?.firstName}!\n          </h2>\n          <p className=\"text-muted-foreground mt-1\">\n            Here's your personal growth overview for today\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/ai-interview\">\n            <Button data-testid=\"button-ai-assessment\">\n              <Brain className=\"mr-2\" size={16} />\n              Start AI Assessment\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n            <Calendar size={16} />\n            <span data-testid=\"current-date\">\n              {getCurrentDateFormatted()} (IST)\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <section>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Today's Overview</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Study Hours</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"study-hours\">\n                    {todayStudyHours.toFixed(1)}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-chart-1 bg-opacity-20 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-chart-1\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <Progress value={(todayStudyHours / 5) * 100} className=\"h-2\" />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {Math.round((todayStudyHours / 5) * 100)}% of daily goal\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Diary Entries</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"diary-entries\">\n                    {thisWeekEntries}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-chart-2 bg-opacity-20 rounded-lg flex items-center justify-center\">\n                  <Book className=\"text-chart-2\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <p className=\"text-xs text-muted-foreground\">This week</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Achievements</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"achievements\">\n                    {thisMonthAchievements}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-chart-3 bg-opacity-20 rounded-lg flex items-center justify-center\">\n                  <Trophy className=\"text-chart-3\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <p className=\"text-xs text-muted-foreground\">This month</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-muted-foreground text-sm\">Growth Score</p>\n                  <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"growth-score\">\n                    {latestAssessment?.growthScore || 'N/A'}\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-chart-4 bg-opacity-20 rounded-lg flex items-center justify-center\">\n                  <ChartLine className=\"text-chart-4\" />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                {latestAssessment?.growthScore && (\n                  <>\n                    <Progress value={latestAssessment.growthScore} className=\"h-2\" />\n                    <p className=\"text-xs text-muted-foreground mt-1\">AI Assessment</p>\n                  </>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Study Progress */}\n      {Object.keys(studySubjects).length > 0 && (\n        <section className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Study Progress</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {Object.entries(studySubjects).slice(0, 3).map(([subject, data]) => (\n                  <div key={subject}>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm text-card-foreground\">{subject}</span>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {data.completed} sessions\n                      </span>\n                    </div>\n                    <Progress value={Math.min((data.total / 1200) * 100, 100)} className=\"h-2\" />\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Insights */}\n          <Card>\n            <CardHeader>\n              <CardTitle>AI Insights</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {latestAssessment ? (\n                <>\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-8 h-8 bg-primary bg-opacity-20 rounded-full flex items-center justify-center\">\n                        <Brain className=\"text-primary text-xs\" />\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-card-foreground font-medium\">Latest Assessment</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {latestAssessment.recommendations.slice(0, 100)}...\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"bg-muted rounded-lg p-4\">\n                  <p className=\"text-sm text-muted-foreground text-center\">\n                    Take your first AI assessment to get personalized insights!\n                  </p>\n                </div>\n              )}\n              \n              <Link href=\"/ai-interview\">\n                <Button className=\"w-full\" data-testid=\"button-assessment\">\n                  <Brain className=\"mr-2\" size={16} />\n                  Take 5-Min Assessment\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </section>\n      )}\n\n      {/* Quick Actions */}\n      <section>\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Quick Actions</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n          <Link href=\"/diary\">\n            <Card className=\"card-hover cursor-pointer\" data-testid=\"card-diary\">\n              <CardContent className=\"p-4 text-center\">\n                <Plus className=\"text-primary text-2xl mb-2 mx-auto\" />\n                <p className=\"text-card-foreground font-medium\">New Diary Entry</p>\n              </CardContent>\n            </Card>\n          </Link>\n          \n          <Link href=\"/study-tracker\">\n            <Card className=\"card-hover cursor-pointer\" data-testid=\"card-study\">\n              <CardContent className=\"p-4 text-center\">\n                <BookOpen className=\"text-chart-1 text-2xl mb-2 mx-auto\" />\n                <p className=\"text-card-foreground font-medium\">Log Study Session</p>\n              </CardContent>\n            </Card>\n          </Link>\n          \n          <Link href=\"/achievements\">\n            <Card className=\"card-hover cursor-pointer\" data-testid=\"card-achievement\">\n              <CardContent className=\"p-4 text-center\">\n                <Trophy className=\"text-chart-3 text-2xl mb-2 mx-auto\" />\n                <p className=\"text-card-foreground font-medium\">Add Achievement</p>\n              </CardContent>\n            </Card>\n          </Link>\n          \n          <Link href=\"/mistakes\">\n            <Card className=\"card-hover cursor-pointer\" data-testid=\"card-mistake\">\n              <CardContent className=\"p-4 text-center\">\n                <AlertTriangle className=\"text-chart-5 text-2xl mb-2 mx-auto\" />\n                <p className=\"text-card-foreground font-medium\">Track Mistake</p>\n              </CardContent>\n            </Card>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","size_bytes":11692},"client/src/pages/Diary.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { BookOpen, Plus, Edit, Trash2, Calendar } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO } from 'date-fns';\nimport { formatDateForInput, formatDateForDisplay, getCurrentIST } from '@/lib/timeUtils';\n\nconst Diary = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<any>(null);\n\n  const [entryForm, setEntryForm] = useState({\n    title: '',\n    content: '',\n    mood: '',\n    date: formatDateForInput(getCurrentIST())\n  });\n\n  const { data: entries, isLoading } = useQuery({\n    queryKey: ['/api/diary'],\n  });\n\n  const createEntryMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/diary', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/diary'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Diary entry created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateEntryMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/diary/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/diary'] });\n      setIsDialogOpen(false);\n      setEditingEntry(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Diary entry updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteEntryMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/diary/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/diary'] });\n      toast({\n        title: 'Success',\n        description: 'Diary entry deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setEntryForm({\n      title: '',\n      content: '',\n      mood: '',\n      date: formatDateForInput(getCurrentIST())\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const entryData = {\n      ...entryForm,\n      date: new Date(entryForm.date),\n    };\n\n    if (editingEntry) {\n      updateEntryMutation.mutate({ id: editingEntry.id, ...entryData });\n    } else {\n      createEntryMutation.mutate(entryData);\n    }\n  };\n\n  const handleEdit = (entry: any) => {\n    setEditingEntry(entry);\n    setEntryForm({\n      title: entry.title,\n      content: entry.content,\n      mood: entry.mood || '',\n      date: formatDateForInput(entry.date)\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this diary entry?')) {\n      deleteEntryMutation.mutate(id);\n    }\n  };\n\n  const moodEmojis: Record<string, string> = {\n    'happy': '😊',\n    'sad': '😢',\n    'excited': '🎉',\n    'anxious': '😰',\n    'peaceful': '😌',\n    'frustrated': '😤',\n    'grateful': '🙏',\n    'motivated': '💪'\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Diary</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-entry\">\n              <Plus className=\"mr-2\" size={16} />\n              New Entry\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingEntry ? 'Edit Entry' : 'Create New Entry'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={entryForm.title}\n                  onChange={(e) => setEntryForm({ ...entryForm, title: e.target.value })}\n                  placeholder=\"What's on your mind today?\"\n                  required\n                  data-testid=\"input-entry-title\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date\">Date</Label>\n                  <Input\n                    id=\"date\"\n                    type=\"date\"\n                    value={entryForm.date}\n                    onChange={(e) => setEntryForm({ ...entryForm, date: e.target.value })}\n                    required\n                    data-testid=\"input-entry-date\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"mood\">Mood</Label>\n                  <Select\n                    value={entryForm.mood}\n                    onValueChange={(value) => setEntryForm({ ...entryForm, mood: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-mood\">\n                      <SelectValue placeholder=\"How are you feeling?\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.entries(moodEmojis).map(([mood, emoji]) => (\n                        <SelectItem key={mood} value={mood}>\n                          {emoji} {mood.charAt(0).toUpperCase() + mood.slice(1)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"content\">Content</Label>\n                <Textarea\n                  id=\"content\"\n                  value={entryForm.content}\n                  onChange={(e) => setEntryForm({ ...entryForm, content: e.target.value })}\n                  placeholder=\"Write about your day, thoughts, or feelings...\"\n                  className=\"min-h-[200px]\"\n                  required\n                  data-testid=\"textarea-entry-content\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingEntry(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-entry\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createEntryMutation.isPending || updateEntryMutation.isPending}\n                  data-testid=\"button-save-entry\"\n                >\n                  {editingEntry ? 'Update Entry' : 'Create Entry'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {entries?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <BookOpen className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No diary entries yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start your personal growth journey by writing your first entry\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-entry\">\n              <Plus className=\"mr-2\" size={16} />\n              Write First Entry\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {entries?.map((entry: any) => (\n            <Card key={entry.id} className=\"card-hover\" data-testid={`entry-${entry.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-xl mb-2\">{entry.title}</CardTitle>\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar size={14} />\n                        <span>{formatDateForDisplay(entry.date)}</span>\n                      </div>\n                      {entry.mood && (\n                        <div className=\"flex items-center space-x-1\">\n                          <span>{moodEmojis[entry.mood]}</span>\n                          <span className=\"capitalize\">{entry.mood}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(entry)}\n                      data-testid={`button-edit-entry-${entry.id}`}\n                    >\n                      <Edit size={16} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(entry.id)}\n                      data-testid={`button-delete-entry-${entry.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-card-foreground whitespace-pre-wrap\">{entry.content}</p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Diary;\n","size_bytes":11278},"client/src/pages/Mistakes.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { AlertTriangle, Plus, Edit, Trash2, Calendar, Lightbulb } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO } from 'date-fns';\nimport { formatDateForInput, formatDateForDisplay, getCurrentIST } from '@/lib/timeUtils';\n\nconst Mistakes = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingMistake, setEditingMistake] = useState<any>(null);\n\n  const [mistakeForm, setMistakeForm] = useState({\n    title: '',\n    description: '',\n    lesson: '',\n    category: '',\n    severity: '',\n    date: formatDateForInput(getCurrentIST())\n  });\n\n  const { data: mistakes, isLoading } = useQuery({\n    queryKey: ['/api/mistakes'],\n  });\n\n  const createMistakeMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/mistakes', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/mistakes'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Mistake recorded successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateMistakeMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/mistakes/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/mistakes'] });\n      setIsDialogOpen(false);\n      setEditingMistake(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Mistake updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteMistakeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/mistakes/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/mistakes'] });\n      toast({\n        title: 'Success',\n        description: 'Mistake deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setMistakeForm({\n      title: '',\n      description: '',\n      lesson: '',\n      category: '',\n      severity: '',\n      date: formatDateForInput(getCurrentIST())\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const mistakeData = {\n      ...mistakeForm,\n      date: new Date(mistakeForm.date).toISOString(),\n    };\n\n    if (editingMistake) {\n      updateMistakeMutation.mutate({ id: editingMistake.id, ...mistakeData });\n    } else {\n      createMistakeMutation.mutate(mistakeData);\n    }\n  };\n\n  const handleEdit = (mistake: any) => {\n    setEditingMistake(mistake);\n    setMistakeForm({\n      title: mistake.title,\n      description: mistake.description,\n      lesson: mistake.lesson || '',\n      category: mistake.category || '',\n      severity: mistake.severity || '',\n      date: formatDateForInput(mistake.date)\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this mistake record?')) {\n      deleteMistakeMutation.mutate(id);\n    }\n  };\n\n  const severityColors: Record<string, string> = {\n    'low': 'bg-chart-2 text-white',\n    'medium': 'bg-chart-3 text-white',\n    'high': 'bg-destructive text-destructive-foreground'\n  };\n\n  const severityLabels: Record<string, string> = {\n    'low': 'Low Impact',\n    'medium': 'Medium Impact',\n    'high': 'High Impact'\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Mistakes</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-mistake\">\n              <Plus className=\"mr-2\" size={16} />\n              Record Mistake\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingMistake ? 'Edit Mistake' : 'Record New Mistake'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={mistakeForm.title}\n                  onChange={(e) => setMistakeForm({ ...mistakeForm, title: e.target.value })}\n                  placeholder=\"Brief description of the mistake\"\n                  required\n                  data-testid=\"input-mistake-title\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date\">Date</Label>\n                  <Input\n                    id=\"date\"\n                    type=\"date\"\n                    value={mistakeForm.date}\n                    onChange={(e) => setMistakeForm({ ...mistakeForm, date: e.target.value })}\n                    required\n                    data-testid=\"input-mistake-date\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"severity\">Severity</Label>\n                  <Select\n                    value={mistakeForm.severity}\n                    onValueChange={(value) => setMistakeForm({ ...mistakeForm, severity: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-severity\">\n                      <SelectValue placeholder=\"Select severity\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low Impact</SelectItem>\n                      <SelectItem value=\"medium\">Medium Impact</SelectItem>\n                      <SelectItem value=\"high\">High Impact</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <Input\n                  id=\"category\"\n                  value={mistakeForm.category}\n                  onChange={(e) => setMistakeForm({ ...mistakeForm, category: e.target.value })}\n                  placeholder=\"e.g., Work, Personal, Financial\"\n                  data-testid=\"input-mistake-category\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={mistakeForm.description}\n                  onChange={(e) => setMistakeForm({ ...mistakeForm, description: e.target.value })}\n                  placeholder=\"What happened? Provide context...\"\n                  className=\"min-h-[100px]\"\n                  required\n                  data-testid=\"textarea-mistake-description\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lesson\">Lesson Learned</Label>\n                <Textarea\n                  id=\"lesson\"\n                  value={mistakeForm.lesson}\n                  onChange={(e) => setMistakeForm({ ...mistakeForm, lesson: e.target.value })}\n                  placeholder=\"What did you learn? How will you avoid this in the future?\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-mistake-lesson\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingMistake(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-mistake\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createMistakeMutation.isPending || updateMistakeMutation.isPending}\n                  data-testid=\"button-save-mistake\"\n                >\n                  {editingMistake ? 'Update Mistake' : 'Record Mistake'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {mistakes?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <AlertTriangle className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No mistakes recorded yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Transform your setbacks into comebacks by documenting and learning from mistakes\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-mistake\">\n              <Plus className=\"mr-2\" size={16} />\n              Record First Mistake\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {mistakes?.map((mistake: any) => (\n            <Card key={mistake.id} className=\"card-hover\" data-testid={`mistake-${mistake.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-xl mb-2\">{mistake.title}</CardTitle>\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mb-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar size={14} />\n                        <span>{formatDateForDisplay(mistake.date)}</span>\n                      </div>\n                      {mistake.category && (\n                        <span className=\"bg-muted text-muted-foreground px-2 py-1 rounded text-xs\">\n                          {mistake.category}\n                        </span>\n                      )}\n                      {mistake.severity && (\n                        <span className={`px-2 py-1 rounded text-xs ${severityColors[mistake.severity]}`}>\n                          {severityLabels[mistake.severity]}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(mistake)}\n                      data-testid={`button-edit-mistake-${mistake.id}`}\n                    >\n                      <Edit size={16} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(mistake.id)}\n                      data-testid={`button-delete-mistake-${mistake.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-card-foreground whitespace-pre-wrap mb-4\">{mistake.description}</p>\n                {mistake.lesson && (\n                  <div className=\"bg-muted rounded-lg p-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Lightbulb className=\"text-chart-3 mt-0.5\" size={16} />\n                      <div>\n                        <h5 className=\"font-medium text-card-foreground mb-1\">Lesson Learned</h5>\n                        <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                          {mistake.lesson}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Mistakes;\n","size_bytes":13639},"client/src/pages/People.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Users, Plus, Edit, Trash2, Heart, Frown, User } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO } from 'date-fns';\nimport { formatDateForDisplay } from '@/lib/timeUtils';\n\nconst People = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPerson, setEditingPerson] = useState<any>(null);\n\n  const [personForm, setPersonForm] = useState({\n    name: '',\n    relationship: '',\n    sentiment: '',\n    description: '',\n    notes: ''\n  });\n\n  const { data: people, isLoading } = useQuery({\n    queryKey: ['/api/people'],\n  });\n\n  const createPersonMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/people', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/people'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Person added successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updatePersonMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/people/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/people'] });\n      setIsDialogOpen(false);\n      setEditingPerson(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Person updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deletePersonMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/people/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/people'] });\n      toast({\n        title: 'Success',\n        description: 'Person removed successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setPersonForm({\n      name: '',\n      relationship: '',\n      sentiment: '',\n      description: '',\n      notes: ''\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingPerson) {\n      updatePersonMutation.mutate({ id: editingPerson.id, ...personForm });\n    } else {\n      createPersonMutation.mutate(personForm);\n    }\n  };\n\n  const handleEdit = (person: any) => {\n    setEditingPerson(person);\n    setPersonForm({\n      name: person.name,\n      relationship: person.relationship,\n      sentiment: person.sentiment,\n      description: person.description || '',\n      notes: person.notes || ''\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to remove this person?')) {\n      deletePersonMutation.mutate(id);\n    }\n  };\n\n  const getSentimentIcon = (sentiment: string) => {\n    return sentiment === 'positive' ? Heart : Frown;\n  };\n\n  const getSentimentColor = (sentiment: string) => {\n    return sentiment === 'positive' ? 'text-chart-2' : 'text-chart-5';\n  };\n\n  const getSentimentBgColor = (sentiment: string) => {\n    return sentiment === 'positive' ? 'bg-chart-2 bg-opacity-20' : 'bg-chart-5 bg-opacity-20';\n  };\n\n  // Separate people by sentiment\n  const positivePeople = people?.filter((person: any) => person.sentiment === 'positive') || [];\n  const negativePeople = people?.filter((person: any) => person.sentiment === 'negative') || [];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">People</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-person\">\n              <Plus className=\"mr-2\" size={16} />\n              Add Person\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingPerson ? 'Edit Person' : 'Add New Person'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Name</Label>\n                <Input\n                  id=\"name\"\n                  value={personForm.name}\n                  onChange={(e) => setPersonForm({ ...personForm, name: e.target.value })}\n                  placeholder=\"Person's name\"\n                  required\n                  data-testid=\"input-person-name\"\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"relationship\">Relationship</Label>\n                  <Input\n                    id=\"relationship\"\n                    value={personForm.relationship}\n                    onChange={(e) => setPersonForm({ ...personForm, relationship: e.target.value })}\n                    placeholder=\"e.g., Friend, Colleague, Family\"\n                    required\n                    data-testid=\"input-relationship\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"sentiment\">Sentiment</Label>\n                  <Select\n                    value={personForm.sentiment}\n                    onValueChange={(value) => setPersonForm({ ...personForm, sentiment: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-sentiment\">\n                      <SelectValue placeholder=\"How do you feel about them?\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"positive\">❤️ Positive / Love</SelectItem>\n                      <SelectItem value=\"negative\">😞 Negative / Dislike</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={personForm.description}\n                  onChange={(e) => setPersonForm({ ...personForm, description: e.target.value })}\n                  placeholder=\"Brief description of this person and your relationship...\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-person-description\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={personForm.notes}\n                  onChange={(e) => setPersonForm({ ...personForm, notes: e.target.value })}\n                  placeholder=\"Any additional notes, memories, or thoughts...\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-person-notes\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingPerson(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-person\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createPersonMutation.isPending || updatePersonMutation.isPending}\n                  data-testid=\"button-save-person\"\n                >\n                  {editingPerson ? 'Update Person' : 'Add Person'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {people?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Users className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No people tracked yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start tracking your relationships and feelings about important people in your life\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-person\">\n              <Plus className=\"mr-2\" size={16} />\n              Add First Person\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-8\">\n          {/* Positive Relationships */}\n          {positivePeople.length > 0 && (\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Heart className=\"text-chart-2\" size={24} />\n                <h2 className=\"text-xl font-semibold text-foreground\">People I Love</h2>\n                <span className=\"bg-chart-2 bg-opacity-20 text-chart-2 px-2 py-1 rounded text-sm\">\n                  {positivePeople.length}\n                </span>\n              </div>\n              <div className=\"grid gap-4\">\n                {positivePeople.map((person: any) => (\n                  <Card key={person.id} className=\"card-hover\" data-testid={`person-${person.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getSentimentBgColor(person.sentiment)}`}>\n                            <User className={getSentimentColor(person.sentiment)} size={20} />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-2\">\n                              <h3 className=\"text-lg font-semibold text-card-foreground\">{person.name}</h3>\n                              {React.createElement(getSentimentIcon(person.sentiment), {\n                                className: getSentimentColor(person.sentiment),\n                                size: 16\n                              })}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">{person.relationship}</p>\n                            {person.description && (\n                              <p className=\"text-card-foreground whitespace-pre-wrap mb-2\">\n                                {person.description}\n                              </p>\n                            )}\n                            {person.notes && (\n                              <div className=\"bg-muted rounded-lg p-3 mt-3\">\n                                <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                                  {person.notes}\n                                </p>\n                              </div>\n                            )}\n                            <p className=\"text-xs text-muted-foreground mt-3\">\n                              Added {format(parseISO(person.createdAt), 'MMM d, yyyy')}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(person)}\n                            data-testid={`button-edit-person-${person.id}`}\n                          >\n                            <Edit size={16} />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(person.id)}\n                            data-testid={`button-delete-person-${person.id}`}\n                          >\n                            <Trash2 size={16} />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Negative Relationships */}\n          {negativePeople.length > 0 && (\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <Frown className=\"text-chart-5\" size={24} />\n                <h2 className=\"text-xl font-semibold text-foreground\">Challenging Relationships</h2>\n                <span className=\"bg-chart-5 bg-opacity-20 text-chart-5 px-2 py-1 rounded text-sm\">\n                  {negativePeople.length}\n                </span>\n              </div>\n              <div className=\"grid gap-4\">\n                {negativePeople.map((person: any) => (\n                  <Card key={person.id} className=\"card-hover\" data-testid={`person-${person.id}`}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-4\">\n                          <div className={`w-12 h-12 rounded-full flex items-center justify-center ${getSentimentBgColor(person.sentiment)}`}>\n                            <User className={getSentimentColor(person.sentiment)} size={20} />\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3 mb-2\">\n                              <h3 className=\"text-lg font-semibold text-card-foreground\">{person.name}</h3>\n                              {React.createElement(getSentimentIcon(person.sentiment), {\n                                className: getSentimentColor(person.sentiment),\n                                size: 16\n                              })}\n                            </div>\n                            <p className=\"text-sm text-muted-foreground mb-2\">{person.relationship}</p>\n                            {person.description && (\n                              <p className=\"text-card-foreground whitespace-pre-wrap mb-2\">\n                                {person.description}\n                              </p>\n                            )}\n                            {person.notes && (\n                              <div className=\"bg-muted rounded-lg p-3 mt-3\">\n                                <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                                  {person.notes}\n                                </p>\n                              </div>\n                            )}\n                            <p className=\"text-xs text-muted-foreground mt-3\">\n                              Added {format(parseISO(person.createdAt), 'MMM d, yyyy')}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex space-x-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(person)}\n                            data-testid={`button-edit-person-${person.id}`}\n                          >\n                            <Edit size={16} />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(person.id)}\n                            data-testid={`button-delete-person-${person.id}`}\n                          >\n                            <Trash2 size={16} />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default People;\n","size_bytes":17578},"client/src/pages/Stories.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { PenTool, Plus, Edit, Trash2, Calendar } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO } from 'date-fns';\n\nconst Stories = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingStory, setEditingStory] = useState<any>(null);\n\n  const [storyForm, setStoryForm] = useState({\n    title: '',\n    content: '',\n    category: ''\n  });\n\n  const { data: stories, isLoading } = useQuery({\n    queryKey: ['/api/stories'],\n  });\n\n  const createStoryMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/stories', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stories'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Story created successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateStoryMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/stories/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stories'] });\n      setIsDialogOpen(false);\n      setEditingStory(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Story updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteStoryMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/stories/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/stories'] });\n      toast({\n        title: 'Success',\n        description: 'Story deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setStoryForm({\n      title: '',\n      content: '',\n      category: ''\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (editingStory) {\n      updateStoryMutation.mutate({ id: editingStory.id, ...storyForm });\n    } else {\n      createStoryMutation.mutate(storyForm);\n    }\n  };\n\n  const handleEdit = (story: any) => {\n    setEditingStory(story);\n    setStoryForm({\n      title: story.title,\n      content: story.content,\n      category: story.category || ''\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this story?')) {\n      deleteStoryMutation.mutate(id);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Stories</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-story\">\n              <Plus className=\"mr-2\" size={16} />\n              New Story\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingStory ? 'Edit Story' : 'Create New Story'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title</Label>\n                <Input\n                  id=\"title\"\n                  value={storyForm.title}\n                  onChange={(e) => setStoryForm({ ...storyForm, title: e.target.value })}\n                  placeholder=\"What's your story about?\"\n                  required\n                  data-testid=\"input-story-title\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"category\">Category</Label>\n                <Input\n                  id=\"category\"\n                  value={storyForm.category}\n                  onChange={(e) => setStoryForm({ ...storyForm, category: e.target.value })}\n                  placeholder=\"e.g., Personal Growth, Travel, Career\"\n                  data-testid=\"input-story-category\"\n                />\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"content\">Content</Label>\n                <Textarea\n                  id=\"content\"\n                  value={storyForm.content}\n                  onChange={(e) => setStoryForm({ ...storyForm, content: e.target.value })}\n                  placeholder=\"Tell your story...\"\n                  className=\"min-h-[300px]\"\n                  required\n                  data-testid=\"textarea-story-content\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingStory(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-story\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createStoryMutation.isPending || updateStoryMutation.isPending}\n                  data-testid=\"button-save-story\"\n                >\n                  {editingStory ? 'Update Story' : 'Create Story'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {stories?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <PenTool className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No stories yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start documenting your personal journey and experiences\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-story\">\n              <Plus className=\"mr-2\" size={16} />\n              Write First Story\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-6\">\n          {stories?.map((story: any) => (\n            <Card key={story.id} className=\"card-hover\" data-testid={`story-${story.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <CardTitle className=\"text-xl mb-2\">{story.title}</CardTitle>\n                    <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Calendar size={14} />\n                        <span>{format(parseISO(story.createdAt), 'MMM d, yyyy')}</span>\n                      </div>\n                      {story.category && (\n                        <span className=\"bg-primary text-primary-foreground px-2 py-1 rounded text-xs\">\n                          {story.category}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(story)}\n                      data-testid={`button-edit-story-${story.id}`}\n                    >\n                      <Edit size={16} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(story.id)}\n                      data-testid={`button-delete-story-${story.id}`}\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-card-foreground whitespace-pre-wrap line-clamp-6\">\n                  {story.content}\n                </p>\n                {story.content.length > 300 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleEdit(story)}\n                    className=\"mt-2 p-0 h-auto text-primary hover:text-primary/80\"\n                  >\n                    Read more...\n                  </Button>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Stories;\n","size_bytes":10066},"client/src/pages/StudyTracker.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { GraduationCap, Plus, Edit, Trash2, Calendar, Clock, BookOpen, BarChart3 } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format, parseISO, subDays, isAfter } from 'date-fns';\nimport { formatDateForInput, formatDateForDisplay, getCurrentIST } from '@/lib/timeUtils';\nimport { Progress } from '@/components/ui/progress';\n\nconst StudyTracker = () => {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingSession, setEditingSession] = useState<any>(null);\n\n  const [sessionForm, setSessionForm] = useState({\n    subject: '',\n    topic: '',\n    duration: '',\n    notes: '',\n    date: new Date().toISOString().split('T')[0]\n  });\n\n  const { data: sessions, isLoading } = useQuery({\n    queryKey: ['/api/study-sessions'],\n  });\n\n  const createSessionMutation = useMutation({\n    mutationFn: (data: any) => apiRequest('POST', '/api/study-sessions', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/study-sessions'] });\n      setIsDialogOpen(false);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Study session logged successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateSessionMutation = useMutation({\n    mutationFn: ({ id, ...data }: any) => apiRequest('PUT', `/api/study-sessions/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/study-sessions'] });\n      setIsDialogOpen(false);\n      setEditingSession(null);\n      resetForm();\n      toast({\n        title: 'Success',\n        description: 'Study session updated successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteSessionMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/study-sessions/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/study-sessions'] });\n      toast({\n        title: 'Success',\n        description: 'Study session deleted successfully',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSessionForm({\n      subject: '',\n      topic: '',\n      duration: '',\n      notes: '',\n      date: new Date().toISOString().split('T')[0]\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const sessionData = {\n      ...sessionForm,\n      duration: parseInt(sessionForm.duration),\n      date: new Date(sessionForm.date).toISOString(),\n    };\n\n    if (editingSession) {\n      updateSessionMutation.mutate({ id: editingSession.id, ...sessionData });\n    } else {\n      createSessionMutation.mutate(sessionData);\n    }\n  };\n\n  const handleEdit = (session: any) => {\n    setEditingSession(session);\n    setSessionForm({\n      subject: session.subject,\n      topic: session.topic,\n      duration: session.duration.toString(),\n      notes: session.notes || '',\n      date: format(parseISO(session.date), 'yyyy-MM-dd')\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this study session?')) {\n      deleteSessionMutation.mutate(id);\n    }\n  };\n\n  // Analytics calculations\n  const totalSessions = sessions?.length || 0;\n  const totalHours = sessions?.reduce((total: number, session: any) => total + (session.duration / 60), 0) || 0;\n  \n  const weekAgo = subDays(new Date(), 7);\n  const thisWeekSessions = sessions?.filter((session: any) => \n    isAfter(parseISO(session.date), weekAgo)\n  ) || [];\n  const thisWeekHours = thisWeekSessions.reduce((total: number, session: any) => total + (session.duration / 60), 0) || 0;\n\n  const subjects = sessions?.reduce((acc: Record<string, any>, session: any) => {\n    if (!acc[session.subject]) {\n      acc[session.subject] = { sessions: 0, minutes: 0, topics: new Set() };\n    }\n    acc[session.subject].sessions += 1;\n    acc[session.subject].minutes += session.duration;\n    acc[session.subject].topics.add(session.topic);\n    return acc;\n  }, {}) || {};\n\n  const subjectColors = ['chart-1', 'chart-2', 'chart-3', 'chart-4', 'chart-5'];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-8 bg-muted rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-3xl font-bold text-foreground\">Study Tracker</h1>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-new-session\">\n              <Plus className=\"mr-2\" size={16} />\n              Log Session\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingSession ? 'Edit Study Session' : 'Log New Study Session'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"subject\">Subject</Label>\n                  <Input\n                    id=\"subject\"\n                    value={sessionForm.subject}\n                    onChange={(e) => setSessionForm({ ...sessionForm, subject: e.target.value })}\n                    placeholder=\"e.g., Mathematics, Programming\"\n                    required\n                    data-testid=\"input-subject\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"topic\">Topic</Label>\n                  <Input\n                    id=\"topic\"\n                    value={sessionForm.topic}\n                    onChange={(e) => setSessionForm({ ...sessionForm, topic: e.target.value })}\n                    placeholder=\"e.g., Calculus, React Hooks\"\n                    required\n                    data-testid=\"input-topic\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"duration\">Duration (minutes)</Label>\n                  <Input\n                    id=\"duration\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={sessionForm.duration}\n                    onChange={(e) => setSessionForm({ ...sessionForm, duration: e.target.value })}\n                    placeholder=\"60\"\n                    required\n                    data-testid=\"input-duration\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"date\">Date</Label>\n                  <Input\n                    id=\"date\"\n                    type=\"date\"\n                    value={sessionForm.date}\n                    onChange={(e) => setSessionForm({ ...sessionForm, date: e.target.value })}\n                    required\n                    data-testid=\"input-session-date\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"notes\">Notes (optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={sessionForm.notes}\n                  onChange={(e) => setSessionForm({ ...sessionForm, notes: e.target.value })}\n                  placeholder=\"What did you learn? Any challenges or insights?\"\n                  className=\"min-h-[100px]\"\n                  data-testid=\"textarea-session-notes\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsDialogOpen(false);\n                    setEditingSession(null);\n                    resetForm();\n                  }}\n                  data-testid=\"button-cancel-session\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createSessionMutation.isPending || updateSessionMutation.isPending}\n                  data-testid=\"button-save-session\"\n                >\n                  {editingSession ? 'Update Session' : 'Log Session'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Analytics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Total Sessions</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"total-sessions\">\n                  {totalSessions}\n                </p>\n              </div>\n              <BookOpen className=\"text-chart-1\" size={24} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Total Hours</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"total-hours\">\n                  {totalHours.toFixed(1)}\n                </p>\n              </div>\n              <Clock className=\"text-chart-2\" size={24} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">This Week</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"week-hours\">\n                  {thisWeekHours.toFixed(1)}h\n                </p>\n              </div>\n              <BarChart3 className=\"text-chart-3\" size={24} />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-muted-foreground text-sm\">Subjects</p>\n                <p className=\"text-2xl font-bold text-card-foreground\" data-testid=\"total-subjects\">\n                  {Object.keys(subjects).length}\n                </p>\n              </div>\n              <GraduationCap className=\"text-chart-4\" size={24} />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Subject Progress */}\n      {Object.keys(subjects).length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Subject Progress</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {Object.entries(subjects).map(([subject, data]: [string, any], index) => (\n              <div key={subject} className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-3 h-3 rounded-full bg-${subjectColors[index % subjectColors.length]}`}></div>\n                    <span className=\"font-medium text-card-foreground\">{subject}</span>\n                  </div>\n                  <div className=\"text-right text-sm text-muted-foreground\">\n                    <div>{data.topics.size} topics • {(data.minutes / 60).toFixed(1)} hours</div>\n                    <div>{data.sessions} sessions</div>\n                  </div>\n                </div>\n                <Progress value={Math.min((data.minutes / 1200) * 100, 100)} className=\"h-2\" />\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recent Sessions */}\n      {sessions?.length === 0 ? (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <GraduationCap className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold text-foreground mb-2\">No study sessions yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Start tracking your learning progress by logging your first study session\n            </p>\n            <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-first-session\">\n              <Plus className=\"mr-2\" size={16} />\n              Log First Session\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Sessions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {sessions?.slice(0, 10).map((session: any) => (\n                <div\n                  key={session.id}\n                  className=\"flex items-center justify-between p-4 bg-muted rounded-lg\"\n                  data-testid={`session-${session.id}`}\n                >\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-chart-1 bg-opacity-20 rounded-lg flex items-center justify-center\">\n                        <BookOpen className=\"text-chart-1\" size={16} />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-card-foreground\">\n                          {session.subject} - {session.topic}\n                        </h4>\n                        <div className=\"flex items-center space-x-4 text-sm text-muted-foreground mt-1\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar size={12} />\n                            <span>{format(parseISO(session.date), 'MMM d, yyyy')}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Clock size={12} />\n                            <span>{session.duration} min</span>\n                          </div>\n                        </div>\n                        {session.notes && (\n                          <p className=\"text-sm text-muted-foreground mt-2 line-clamp-2\">\n                            {session.notes}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(session)}\n                      data-testid={`button-edit-session-${session.id}`}\n                    >\n                      <Edit size={14} />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(session.id)}\n                      data-testid={`button-delete-session-${session.id}`}\n                    >\n                      <Trash2 size={14} />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default StudyTracker;\n","size_bytes":16811},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  token: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nexport interface SignUpData {\n  username: string;\n  email: string;\n  password: string;\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n}\n\nexport interface SignInData {\n  email: string;\n  password: string;\n}\n","size_bytes":473},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/timeUtils.ts":{"content":"import { format, parseISO } from 'date-fns';\nimport { fromZonedTime, toZonedTime } from 'date-fns-tz';\n\n// Indian Standard Time timezone\nexport const IST_TIMEZONE = 'Asia/Kolkata';\n\n// Get current date and time in IST\nexport const getCurrentIST = (): Date => {\n  return toZonedTime(new Date(), IST_TIMEZONE);\n};\n\n// Format date in IST timezone\nexport const formatDateIST = (date: Date | string, formatString: string): string => {\n  const dateObj = typeof date === 'string' ? parseISO(date) : date;\n  const istDate = toZonedTime(dateObj, IST_TIMEZONE);\n  return format(istDate, formatString);\n};\n\n// Format current date for display (e.g., \"December 6, 2024\")\nexport const getCurrentDateFormatted = (): string => {\n  const now = getCurrentIST();\n  return format(now, 'MMMM d, yyyy');\n};\n\n// Convert UTC date to IST for form inputs (YYYY-MM-DD format)\nexport const formatDateForInput = (date: Date | string): string => {\n  return formatDateIST(date, 'yyyy-MM-dd');\n};\n\n// Convert UTC datetime to IST for datetime-local inputs\nexport const formatDateTimeForInput = (date: Date | string): string => {\n  return formatDateIST(date, \"yyyy-MM-dd'T'HH:mm\");\n};\n\n// Format date for display (e.g., \"Dec 6, 2024\")\nexport const formatDateForDisplay = (date: Date | string): string => {\n  return formatDateIST(date, 'MMM d, yyyy');\n};\n\n// Format datetime for display (e.g., \"Dec 6, 2024 at 2:30 PM\")\nexport const formatDateTimeForDisplay = (date: Date | string): string => {\n  return formatDateIST(date, 'MMM d, yyyy \\'at\\' h:mm a');\n};\n\n// Format time only (e.g., \"2:30 PM\")\nexport const formatTimeForDisplay = (date: Date | string): string => {\n  return formatDateIST(date, 'h:mm a');\n};\n\n// Convert local date input to UTC for storage\nexport const convertLocalDateToUTC = (dateString: string): string => {\n  // Assume the input date is in IST and convert to UTC\n  const localDate = new Date(dateString);\n  const utcDate = fromZonedTime(localDate, IST_TIMEZONE);\n  return utcDate.toISOString();\n};\n\n// Check if two dates are the same day in IST\nexport const isSameDayIST = (date1: Date | string, date2: Date | string): boolean => {\n  const date1Obj = typeof date1 === 'string' ? parseISO(date1) : date1;\n  const date2Obj = typeof date2 === 'string' ? parseISO(date2) : date2;\n  \n  const ist1 = toZonedTime(date1Obj, IST_TIMEZONE);\n  const ist2 = toZonedTime(date2Obj, IST_TIMEZONE);\n  \n  return format(ist1, 'yyyy-MM-dd') === format(ist2, 'yyyy-MM-dd');\n};","size_bytes":2443}},"version":1}